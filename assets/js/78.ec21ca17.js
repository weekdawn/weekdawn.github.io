(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{732:function(e,s,a){"use strict";a.r(s);var t=a(7),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"docker简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker简介"}},[e._v("#")]),e._v(" Docker简介")]),e._v(" "),a("p",[e._v("Docker 是一个开源的应用容器引擎，基于 "),a("a",{attrs:{href:"https://www.runoob.com/go/go-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Go 语言"),a("OutboundLink")],1),e._v(" 并遵从 Apache2.0 协议开源。")]),e._v(" "),a("p",[e._v("Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。")]),e._v(" "),a("p",[e._v("容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。")]),e._v(" "),a("h3",{attrs:{id:"docker的应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker的应用场景"}},[e._v("#")]),e._v(" Docker的应用场景")]),e._v(" "),a("ul",[a("li",[e._v("Web 应用的自动化打包和发布。")]),e._v(" "),a("li",[e._v("自动化测试和持续集成、发布。")]),e._v(" "),a("li",[e._v("在服务型环境中部署和调整数据库或其他的后台应用。")]),e._v(" "),a("li",[e._v("从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。")])]),e._v(" "),a("h3",{attrs:{id:"docker-的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-的优点"}},[e._v("#")]),e._v(" Docker 的优点")]),e._v(" "),a("p",[e._v("Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用 Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。")]),e._v(" "),a("h4",{attrs:{id:"_1、快速-一致地交付您的应用程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、快速-一致地交付您的应用程序"}},[e._v("#")]),e._v(" 1、快速，一致地交付您的应用程序")]),e._v(" "),a("p",[e._v("Docker 允许开发人员使用您提供的应用程序或服务的本地容器在标准化环境中工作，从而简化了开发的生命周期。")]),e._v(" "),a("p",[e._v("容器非常适合持续集成和持续交付（CI / CD）工作流程，请考虑以下示例方案：")]),e._v(" "),a("ul",[a("li",[e._v("您的开发人员在本地编写代码，并使用 Docker 容器与同事共享他们的工作。")]),e._v(" "),a("li",[e._v("他们使用 Docker 将其应用程序推送到测试环境中，并执行自动或手动测试。")]),e._v(" "),a("li",[e._v("当开发人员发现错误时，他们可以在开发环境中对其进行修复，然后将其重新部署到测试环境中，以进行测试和验证。")]),e._v(" "),a("li",[e._v("测试完成后，将修补程序推送给生产环境，就像将更新的镜像推送到生产环境一样简单。")])]),e._v(" "),a("h4",{attrs:{id:"_2、响应式部署和扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、响应式部署和扩展"}},[e._v("#")]),e._v(" 2、响应式部署和扩展")]),e._v(" "),a("p",[e._v("Docker 是基于容器的平台，允许高度可移植的工作负载。Docker 容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。")]),e._v(" "),a("p",[e._v("Docker 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。")]),e._v(" "),a("h4",{attrs:{id:"_3、在同一硬件上运行更多工作负载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、在同一硬件上运行更多工作负载"}},[e._v("#")]),e._v(" 3、在同一硬件上运行更多工作负载")]),e._v(" "),a("p",[e._v("Docker 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。Docker 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。")]),e._v(" "),a("h2",{attrs:{id:"docker架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker架构"}},[e._v("#")]),e._v(" Docker架构")]),e._v(" "),a("p",[e._v("Docker 包括三个基本概念:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("镜像（Image）")]),e._v("：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。")]),e._v(" "),a("li",[a("strong",[e._v("容器（Container）")]),e._v("：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),e._v(" "),a("li",[a("strong",[e._v("仓库（Repository）")]),e._v("：仓库可看成一个代码控制中心，用来保存镜像。")])]),e._v(" "),a("p",[e._v("Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。")]),e._v(" "),a("p",[e._v("Docker 容器通过 Docker 镜像来创建。")]),e._v(" "),a("p",[e._v("容器与镜像的关系类似于面向对象编程中的对象与类。")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Docker")]),e._v(" "),a("th",[e._v("面向对象")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("容器")]),e._v(" "),a("td",[e._v("对象")])]),e._v(" "),a("tr",[a("td",[e._v("镜像")]),e._v(" "),a("td",[e._v("类")])])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2016/04/576507-docker1.png",alt:""}})]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("概念")]),e._v(" "),a("th",[e._v("说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("Docker 镜像(Images)")]),e._v(" "),a("td",[e._v("Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。")])]),e._v(" "),a("tr",[a("td",[e._v("Docker 容器(Container)")]),e._v(" "),a("td",[e._v("容器是独立运行的一个或一组应用，是镜像运行时的实体。")])]),e._v(" "),a("tr",[a("td",[e._v("Docker 客户端(Client)")]),e._v(" "),a("td",[e._v("Docker 客户端通过命令行或者其他工具使用 Docker SDK ("),a("a",{attrs:{href:"https://docs.docker.com/develop/sdk/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://docs.docker.com/develop/sdk/"),a("OutboundLink")],1),e._v(") 与 Docker 的守护进程通信。")])]),e._v(" "),a("tr",[a("td",[e._v("Docker 主机(Host)")]),e._v(" "),a("td",[e._v("一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。")])]),e._v(" "),a("tr",[a("td",[e._v("Docker Registry")]),e._v(" "),a("td",[e._v("Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub("),a("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://hub.docker.com"),a("OutboundLink")],1),e._v(") 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <仓库名>:<标签> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 "),a("strong",[e._v("latest")]),e._v(" 作为默认标签。")])]),e._v(" "),a("tr",[a("td",[e._v("Docker Machine")]),e._v(" "),a("td",[e._v("Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。")])])])]),e._v(" "),a("h2",{attrs:{id:"docker容器使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker容器使用"}},[e._v("#")]),e._v(" Docker容器使用")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('runoob@runoob:~$ docker ps\nCONTAINER ID        IMAGE                  COMMAND              ...  \n5917eac21c36        ubuntu:15.10           "/bin/sh -c \'while t…"    ...\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("输出详情介绍：")]),e._v(" "),a("p",[a("strong",[e._v("CONTAINER ID:")]),e._v(" 容器 ID。")]),e._v(" "),a("p",[a("strong",[e._v("IMAGE:")]),e._v(" 使用的镜像。")]),e._v(" "),a("p",[a("strong",[e._v("COMMAND:")]),e._v(" 启动容器时运行的命令。")]),e._v(" "),a("p",[a("strong",[e._v("CREATED:")]),e._v(" 容器的创建时间。")]),e._v(" "),a("p",[a("strong",[e._v("STATUS:")]),e._v(" 容器状态。")]),e._v(" "),a("p",[e._v("状态有7种：")]),e._v(" "),a("ul",[a("li",[e._v("created（已创建）")]),e._v(" "),a("li",[e._v("restarting（重启中）")]),e._v(" "),a("li",[e._v("running 或 Up（运行中）")]),e._v(" "),a("li",[e._v("removing（迁移中）")]),e._v(" "),a("li",[e._v("paused（暂停）")]),e._v(" "),a("li",[e._v("exited（停止）")]),e._v(" "),a("li",[e._v("dead（死亡）")])]),e._v(" "),a("p",[a("strong",[e._v("PORTS:")]),e._v(" 容器的端口信息和使用的连接类型（tcp\\udp）。")]),e._v(" "),a("p",[a("strong",[e._v("NAMES:")]),e._v(" 自动分配的容器名称。")]),e._v(" "),a("p",[e._v('我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现**"对话"**的能力：')]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run -i -t ubuntu:15.10 /bin/bash\nroot@0123ce188bd8:/#\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("各个参数解析：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("-t:")]),e._v(" 在新容器内指定一个伪终端或终端。")]),e._v(" "),a("li",[a("strong",[e._v("-i:")]),e._v(" 允许你对容器内的标准输入 (STDIN) 进行交互。")])]),e._v(" "),a("h3",{attrs:{id:"docker-客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-客户端"}},[e._v("#")]),e._v(" Docker 客户端")]),e._v(" "),a("p",[e._v("docker 客户端非常简单 ,我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~# docker\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"获取镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取镜像"}},[e._v("#")]),e._v(" 获取镜像")]),e._v(" "),a("p",[e._v("如果我们本地没有 ubuntu 镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker pull ubuntu\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"启动容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动容器"}},[e._v("#")]),e._v(" 启动容器")]),e._v(" "),a("p",[e._v("以下命令使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run -it ubuntu /bin/bash\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("参数说明：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("-i")]),e._v(": 交互式操作。")]),e._v(" "),a("li",[a("strong",[e._v("-t")]),e._v(": 终端。")]),e._v(" "),a("li",[a("strong",[e._v("ubuntu")]),e._v(": ubuntu 镜像。")]),e._v(" "),a("li",[a("strong",[e._v("/bin/bash")]),e._v("：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。")])]),e._v(" "),a("p",[e._v("要退出终端，直接输入 "),a("strong",[e._v("exit")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@ed09e4490c57:/# exit\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"启动已停止运行的容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动已停止运行的容器"}},[e._v("#")]),e._v(" 启动已停止运行的容器")]),e._v(" "),a("p",[e._v("查看所有的容器命令如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker ps -a\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("使用 docker start 启动一个已停止的容器：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker start b750bbbcfd88 \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"后台运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后台运行"}},[e._v("#")]),e._v(" 后台运行")]),e._v(" "),a("p",[e._v("在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 -d 指定容器的运行模式。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run -itd --name ubuntu-test ubuntu /bin/bash\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("**注：**加了 -d 参数默认不会进入容器，想要进入容器需要使用指令 "),a("strong",[e._v("docker exec")]),e._v("（下面会介绍到）。")]),e._v(" "),a("h3",{attrs:{id:"停止一个容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#停止一个容器"}},[e._v("#")]),e._v(" 停止一个容器")]),e._v(" "),a("p",[e._v("停止容器的命令如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker stop <容器 ID>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("停止的容器可以通过 docker restart 重启：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker restart <容器 ID>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"进入容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进入容器"}},[e._v("#")]),e._v(" 进入容器")]),e._v(" "),a("p",[e._v("在使用 "),a("strong",[e._v("-d")]),e._v(" 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("docker attach")])]),e._v(" "),a("li",[a("strong",[e._v("docker exec")]),e._v("：推荐大家使用 docker exec 命令，因为此退出容器终端，不会导致容器的停止。")])]),e._v(" "),a("p",[a("strong",[e._v("attach 命令")])]),e._v(" "),a("p",[e._v("下面演示了使用 docker attach 命令。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker attach 1e560fca3906 \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("注意：")]),e._v(" 如果从这个容器退出，会导致容器的停止。")]),e._v(" "),a("p",[a("strong",[e._v("exec 命令")])]),e._v(" "),a("p",[e._v("下面演示了使用 docker exec 命令。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker exec -it 243c32535da7 /bin/bash\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("注意：")]),e._v(" 如果从这个容器退出，容器不会停止，这就是为什么推荐大家使用 "),a("strong",[e._v("docker exec")]),e._v(" 的原因。")]),e._v(" "),a("p",[e._v("更多参数说明请使用 docker exec --help 命令查看。")]),e._v(" "),a("h3",{attrs:{id:"导出和导入容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导出和导入容器"}},[e._v("#")]),e._v(" 导出和导入容器")]),e._v(" "),a("p",[a("strong",[e._v("导出容器")])]),e._v(" "),a("p",[e._v("如果要导出本地某个容器，可以使用 "),a("strong",[e._v("docker export")]),e._v(" 命令。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker export 1e560fca3906 > ubuntu.tar\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("导出容器 1e560fca3906 快照到本地文件 ubuntu.tar。")]),e._v(" "),a("p",[e._v("这样将导出容器快照到本地文件。")]),e._v(" "),a("p",[a("strong",[e._v("导入容器快照")])]),e._v(" "),a("p",[e._v("可以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cat docker/ubuntu.tar | docker import - test/ubuntu:v1\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("此外，也可以通过指定 URL 或者某个目录来导入，例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker import http://example.com/exampleimage.tgz example/imagerepo\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[e._v("#")]),e._v(" 删除容器")]),e._v(" "),a("p",[e._v("删除容器使用 "),a("strong",[e._v("docker rm")]),e._v(" 命令：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker rm -f 1e560fca3906\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("下面的命令可以清理掉所有处于终止状态的容器。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker container prune\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h2",{attrs:{id:"docker镜像使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker镜像使用"}},[e._v("#")]),e._v(" Docker镜像使用")]),e._v(" "),a("p",[e._v("当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。")]),e._v(" "),a("p",[e._v("下面我们来学习：")]),e._v(" "),a("ul",[a("li",[e._v("1、管理和使用本地 Docker 主机镜像")]),e._v(" "),a("li",[e._v("2、创建镜像")])]),e._v(" "),a("h3",{attrs:{id:"列出镜像列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列出镜像列表"}},[e._v("#")]),e._v(" 列出镜像列表")]),e._v(" "),a("p",[e._v("我们可以使用 "),a("strong",[e._v("docker images")]),e._v(" 来列出本地主机上的镜像。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker images           \nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nubuntu              14.04               90d5884b1ee0        5 days ago          188 MB\nphp                 5.6                 f40e9e0f10c8        9 days ago          444.8 MB\nnginx               latest              6f8d099c3adc        12 days ago         182.7 MB\nmysql               5.6                 f2e8d6c772c0        3 weeks ago         324.6 MB\nhttpd               latest              02ef73cf1bc0        3 weeks ago         194.4 MB\nubuntu              15.10               4e3b13c8a266        4 weeks ago         136.3 MB\nhello-world         latest              690ed74de00f        6 months ago        960 B\ntraining/webapp     latest              6fae60ef3446        11 months ago       348.8 MB\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("各个选项说明:")]),e._v(" "),a("ul",[a("li",[e._v("**REPOSITORY：**表示镜像的仓库源")]),e._v(" "),a("li",[e._v("**TAG：**镜像的标签")]),e._v(" "),a("li",[e._v("**IMAGE ID：**镜像ID")]),e._v(" "),a("li",[e._v("**CREATED：**镜像创建时间")]),e._v(" "),a("li",[e._v("**SIZE：**镜像大小")])]),e._v(" "),a("p",[e._v("同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。")]),e._v(" "),a("p",[e._v("所以，我们如果要使用版本为15.10的ubuntu系统镜像来运行容器时，命令如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run -t -i ubuntu:15.10 /bin/bash \nroot@d77ccb2e5cca:/#\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("参数说明：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("-i")]),e._v(": 交互式操作。")]),e._v(" "),a("li",[a("strong",[e._v("-t")]),e._v(": 终端。")]),e._v(" "),a("li",[a("strong",[e._v("ubuntu:15.10")]),e._v(": 这是指用 ubuntu 15.10 版本镜像为基础来启动容器。")]),e._v(" "),a("li",[a("strong",[e._v("/bin/bash")]),e._v("：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。")])]),e._v(" "),a("p",[e._v("如果要使用版本为 14.04 的 ubuntu 系统镜像来运行容器时，命令如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run -t -i ubuntu:14.04 /bin/bash \nroot@39e968165990:/# \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像。")]),e._v(" "),a("h3",{attrs:{id:"获取一个新的镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取一个新的镜像"}},[e._v("#")]),e._v(" 获取一个新的镜像")]),e._v(" "),a("p",[e._v("当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Crunoob@runoob:~$ docker pull ubuntu:13.10\n13.10: Pulling from library/ubuntu\n6599cadaf950: Pull complete \n23eda618d451: Pull complete \nf0be3084efe9: Pull complete \n52de432f084b: Pull complete \na3ed95caeb02: Pull complete \nDigest: sha256:15b79a6654811c8d992ebacdfbd5152fcf3d165e374e264076aa435214a947a3\nStatus: Downloaded newer image for ubuntu:13.10\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("下载完成后，我们可以直接使用这个镜像来运行容器。")]),e._v(" "),a("h3",{attrs:{id:"查找镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找镜像"}},[e._v("#")]),e._v(" 查找镜像")]),e._v(" "),a("p",[e._v("我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： "),a("strong",[e._v("https://hub.docker.com/")])]),e._v(" "),a("p",[e._v("我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$  docker search httpd\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("NAME:")]),e._v(" 镜像仓库源的名称")]),e._v(" "),a("p",[a("strong",[e._v("DESCRIPTION:")]),e._v(" 镜像的描述")]),e._v(" "),a("p",[a("strong",[e._v("OFFICIAL:")]),e._v(" 是否 docker 官方发布")]),e._v(" "),a("p",[a("strong",[e._v("stars:")]),e._v(" 类似 Github 里面的 star，表示点赞、喜欢的意思。")]),e._v(" "),a("p",[a("strong",[e._v("AUTOMATED:")]),e._v(" 自动构建。")]),e._v(" "),a("h3",{attrs:{id:"拖取镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拖取镜像"}},[e._v("#")]),e._v(" 拖取镜像")]),e._v(" "),a("p",[e._v("我们决定使用上图中的 httpd 官方版本的镜像，使用命令 docker pull 来下载镜像。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker pull httpd\nUsing default tag: latest\nlatest: Pulling from library/httpd\n8b87079b7a06: Pulling fs layer \na3ed95caeb02: Download complete \n0d62ec9c6a76: Download complete \na329d50397b9: Download complete \nea7c1f032b5c: Waiting \nbe44112b72c7: Waiting\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("下载完成后，我们就可以使用这个镜像了。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run httpd\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"删除镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像"}},[e._v("#")]),e._v(" 删除镜像")]),e._v(" "),a("p",[e._v("镜像删除使用 "),a("strong",[e._v("docker rmi")]),e._v(" 命令，比如我们删除 hello-world 镜像：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker rmi hello-world\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"创建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建镜像"}},[e._v("#")]),e._v(" 创建镜像")]),e._v(" "),a("p",[e._v("当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。")]),e._v(" "),a("ul",[a("li",[e._v("1、从已经创建的容器中更新镜像，并且提交这个镜像")]),e._v(" "),a("li",[e._v("2、使用 Dockerfile 指令来创建一个新的镜像")])]),e._v(" "),a("h4",{attrs:{id:"更新镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新镜像"}},[e._v("#")]),e._v(" 更新镜像")]),e._v(" "),a("p",[e._v("更新镜像之前，我们需要使用镜像来创建一个容器。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run -t -i ubuntu:15.10 /bin/bash\nroot@e218edb10161:/# \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("在运行的容器内使用 "),a("strong",[e._v("apt-get update")]),e._v(" 命令进行更新。")]),e._v(" "),a("p",[e._v("在完成操作之后，输入 exit 命令来退出这个容器。")]),e._v(" "),a("p",[e._v("此时 ID 为 e218edb10161 的容器，是按我们的需求更改的容器。我们可以通过命令 docker commit 来提交容器副本。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('runoob@runoob:~$ docker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:v2\nsha256:70bf1840fd7c0d2d8ef0a42a817eb29f854c1af8f7c59fc03ac7bdee9545aff8\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("各个参数说明：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("-m:")]),e._v(" 提交的描述信息")]),e._v(" "),a("li",[a("strong",[e._v("-a:")]),e._v(" 指定镜像作者")]),e._v(" "),a("li",[e._v("**e218edb10161：**容器 ID")]),e._v(" "),a("li",[a("strong",[e._v("runoob/ubuntu:v2:")]),e._v(" 指定要创建的目标镜像名")])]),e._v(" "),a("p",[e._v("我们可以使用 "),a("strong",[e._v("docker images")]),e._v(" 命令来查看我们的新镜像 "),a("strong",[e._v("runoob/ubuntu:v2")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nrunoob/ubuntu       v2                  70bf1840fd7c        15 seconds ago      158.5 MB\nubuntu              14.04               90d5884b1ee0        5 days ago          188 MB\nphp                 5.6                 f40e9e0f10c8        9 days ago          444.8 MB\nnginx               latest              6f8d099c3adc        12 days ago         182.7 MB\nmysql               5.6                 f2e8d6c772c0        3 weeks ago         324.6 MB\nhttpd               latest              02ef73cf1bc0        3 weeks ago         194.4 MB\nubuntu              15.10               4e3b13c8a266        4 weeks ago         136.3 MB\nhello-world         latest              690ed74de00f        6 months ago        960 B\ntraining/webapp     latest              6fae60ef3446        12 months ago       348.8 MB\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("p",[e._v("使用我们的新镜像 "),a("strong",[e._v("runoob/ubuntu")]),e._v(" 来启动一个容器")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run -t -i runoob/ubuntu:v2 /bin/bash                            \nroot@1a9fbdeb5da3:/#\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h4",{attrs:{id:"构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[e._v("#")]),e._v(" 构建镜像")]),e._v(" "),a("p",[e._v("我们使用命令 "),a("strong",[e._v("docker build")]),e._v(" ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('runoob@runoob:~$ cat Dockerfile \nFROM    centos:6.7\nMAINTAINER      Fisher "fisher@sudops.com"\n\nRUN     /bin/echo \'root:123456\' |chpasswd\nRUN     useradd runoob\nRUN     /bin/echo \'runoob:123456\' |chpasswd\nRUN     /bin/echo -e "LANG=\\"en_US.UTF-8\\"" >/etc/default/local\nEXPOSE  22\nEXPOSE  80\nCMD     /usr/sbin/sshd -D\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("p",[e._v("每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。")]),e._v(" "),a("p",[e._v("第一条FROM，指定使用哪个镜像源")]),e._v(" "),a("p",[e._v("RUN 指令告诉docker 在镜像内执行命令，安装了什么。。。")]),e._v(" "),a("p",[e._v("然后，我们使用 Dockerfile 文件，通过 docker build 命令来构建一个镜像。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker build -t runoob/centos:6.7 .\nSending build context to Docker daemon 17.92 kB\nStep 1 : FROM centos:6.7\n ---&gt; d95b5ca17cc3\nStep 2 : MAINTAINER Fisher \"fisher@sudops.com\"\n ---&gt; Using cache\n ---&gt; 0c92299c6f03\nStep 3 : RUN /bin/echo 'root:123456' |chpasswd\n ---&gt; Using cache\n ---&gt; 0397ce2fbd0a\nStep 4 : RUN useradd runoob\n......\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("p",[e._v("参数说明：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("-t")]),e._v(" ：指定要创建的目标镜像名")]),e._v(" "),a("li",[a("strong",[e._v(".")]),e._v(" ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径")])]),e._v(" "),a("p",[e._v("使用docker images 查看创建的镜像已经在列表中存在,镜像ID为860c279d2fec")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker images \nREPOSITORY          TAG                 IMAGE ID            CREATED              SIZE\nrunoob/centos       6.7                 860c279d2fec        About a minute ago   190.6 MB\nrunoob/ubuntu       v2                  70bf1840fd7c        17 hours ago         158.5 MB\nubuntu              14.04               90d5884b1ee0        6 days ago           188 MB\nphp                 5.6                 f40e9e0f10c8        10 days ago          444.8 MB\nnginx               latest              6f8d099c3adc        12 days ago          182.7 MB\nmysql               5.6                 f2e8d6c772c0        3 weeks ago          324.6 MB\nhttpd               latest              02ef73cf1bc0        3 weeks ago          194.4 MB\nubuntu              15.10               4e3b13c8a266        5 weeks ago          136.3 MB\nhello-world         latest              690ed74de00f        6 months ago         960 B\ncentos              6.7                 d95b5ca17cc3        6 months ago         190.6 MB\ntraining/webapp     latest              6fae60ef3446        12 months ago        348.8 MB\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("我们可以使用新的镜像来创建容器")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run -t -i runoob/centos:6.7  /bin/bash\n[root@41c28d18b5fb /]# id runoob\nuid=500(runoob) gid=500(runoob) groups=500(runoob)\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("从上面看到新镜像已经包含我们创建的用户 runoob。")]),e._v(" "),a("h4",{attrs:{id:"设置镜像标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置镜像标签"}},[e._v("#")]),e._v(" 设置镜像标签")]),e._v(" "),a("p",[e._v("我们可以使用 docker tag 命令，为镜像添加一个新的标签。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker tag 860c279d2fec runoob/centos:dev\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("docker tag 镜像ID，这里是 860c279d2fec ,用户名称、镜像源名(repository name)和新的标签名(tag)。")]),e._v(" "),a("p",[e._v("使用 docker images 命令可以看到，ID为860c279d2fec的镜像多一个标签。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE\nrunoob/centos       6.7                 860c279d2fec        5 hours ago         190.6 MB\nrunoob/centos       dev                 860c279d2fec        5 hours ago         190.6 MB\nrunoob/ubuntu       v2                  70bf1840fd7c        22 hours ago        158.5 MB\nubuntu              14.04               90d5884b1ee0        6 days ago          188 MB\nphp                 5.6                 f40e9e0f10c8        10 days ago         444.8 MB\nnginx               latest              6f8d099c3adc        13 days ago         182.7 MB\nmysql               5.6                 f2e8d6c772c0        3 weeks ago         324.6 MB\nhttpd               latest              02ef73cf1bc0        3 weeks ago         194.4 MB\nubuntu              15.10               4e3b13c8a266        5 weeks ago         136.3 MB\nhello-world         latest              690ed74de00f        6 months ago        960 B\ncentos              6.7                 d95b5ca17cc3        6 months ago        190.6 MB\ntraining/webapp     latest              6fae60ef3446        12 months ago       348.8 MB\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("h2",{attrs:{id:"docker-容器连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器连接"}},[e._v("#")]),e._v(" Docker 容器连接")]),e._v(" "),a("p",[e._v("前面我们实现了通过网络端口来访问运行在 docker 容器内的服务。")]),e._v(" "),a("p",[e._v("容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参数来指定端口映射。")]),e._v(" "),a("p",[e._v("下面我们来实现通过端口连接到一个 docker 容器。")]),e._v(" "),a("h3",{attrs:{id:"网络端口映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络端口映射"}},[e._v("#")]),e._v(" 网络端口映射")]),e._v(" "),a("p",[e._v("我们创建了一个 python 应用的容器。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run -d -P training/webapp python app.py\nfce072cc88cee71b1cdceb57c2821d054a4a59f67da6b416fceb5593f059fc6d\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。")]),e._v(" "),a("p",[e._v("我们使用 "),a("strong",[e._v("-P")]),e._v(" 绑定端口号，使用 "),a("strong",[e._v("docker ps")]),e._v(" 可以看到容器端口 5000 绑定主机端口 32768。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('runoob@runoob:~$ docker ps\nCONTAINER ID    IMAGE               COMMAND            ...           PORTS                     NAMES\nfce072cc88ce    training/webapp     "python app.py"    ...     0.0.0.0:32768->5000/tcp   grave_hopper\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("我们也可以使用 "),a("strong",[e._v("-p")]),e._v(" 标识来指定容器端口绑定到主机端口。")]),e._v(" "),a("p",[e._v("两种方式的区别是:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("-P :"),a("strong",[e._v("是容器内部端口")]),e._v("随机")]),e._v("映射到主机的高端口。")]),e._v(" "),a("li",[a("strong",[e._v("-p :")]),e._v(" 是容器内部端口绑定到"),a("strong",[e._v("指定")]),e._v("的主机端口。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker run -d -p 5000:5000 training/webapp python app.py\n33e4523d30aaf0258915c368e66e03b49535de0ef20317d3f639d40222ba6bc0\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('runoob@runoob:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND           ...           PORTS                     NAMES\n33e4523d30aa        training/webapp     "python app.py"   ...   0.0.0.0:5000->5000/tcp    berserk_bartik\nfce072cc88ce        training/webapp     "python app.py"   ...   0.0.0.0:32768->5000/tcp   grave_hopper\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("另外，我们可以指定容器绑定的网络地址，比如绑定 127.0.0.1。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('runoob@runoob:~$ docker run -d -p 127.0.0.1:5001:5000 training/webapp python app.py\n95c6ceef88ca3e71eaf303c2833fd6701d8d1b2572b5613b5a932dfdfe8a857c\nrunoob@runoob:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND           ...     PORTS                                NAMES\n95c6ceef88ca        training/webapp     "python app.py"   ...  5000/tcp, 127.0.0.1:5001->5000/tcp   adoring_stonebraker\n33e4523d30aa        training/webapp     "python app.py"   ...  0.0.0.0:5000->5000/tcp               berserk_bartik\nfce072cc88ce        training/webapp     "python app.py"   ...    0.0.0.0:32768->5000/tcp              grave_hopper\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("这样我们就可以通过访问 127.0.0.1:5001 来访问容器的 5000 端口。")]),e._v(" "),a("p",[e._v("上面的例子中，默认都是绑定 tcp 端口，如果要绑定 UDP 端口，可以在端口后面加上 "),a("strong",[e._v("/udp")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('runoob@runoob:~$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py\n6779686f06f6204579c1d655dd8b2b31e8e809b245a97b2d3a8e35abe9dcd22a\nrunoob@runoob:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND           ...   PORTS                                NAMES\n6779686f06f6        training/webapp     "python app.py"   ...   5000/tcp, 127.0.0.1:5000->5000/udp   drunk_visvesvaraya\n95c6ceef88ca        training/webapp     "python app.py"   ...    5000/tcp, 127.0.0.1:5001->5000/tcp   adoring_stonebraker\n33e4523d30aa        training/webapp     "python app.py"   ...     0.0.0.0:5000->5000/tcp               berserk_bartik\nfce072cc88ce        training/webapp     "python app.py"   ...    0.0.0.0:32768->5000/tcp              grave_hopper\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("p",[a("strong",[e._v("docker port")]),e._v(" 命令可以让我们快捷地查看端口的绑定情况。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$ docker port adoring_stonebraker 5000\n127.0.0.1:5001\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("h3",{attrs:{id:"docker-容器互联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器互联"}},[e._v("#")]),e._v(" Docker 容器互联")]),e._v(" "),a("p",[e._v("端口映射并不是唯一把 docker 连接到另一个容器的方法。")]),e._v(" "),a("p",[e._v("docker 有一个连接系统允许将多个容器连接在一起，共享连接信息。")]),e._v(" "),a("p",[e._v("docker 连接会创建一个父子关系，其中父容器可以看到子容器的信息。")]),e._v(" "),a("hr"),e._v(" "),a("h4",{attrs:{id:"容器命名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器命名"}},[e._v("#")]),e._v(" 容器命名")]),e._v(" "),a("p",[e._v("当我们创建一个容器的时候，docker 会自动对它进行命名。另外，我们也可以使用 "),a("strong",[e._v("--name")]),e._v(" 标识来命名容器，例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("runoob@runoob:~$  docker run -d -P --name runoob training/webapp python app.py\n43780a6eabaaf14e590b6e849235c75f3012995403f97749775e38436db9a441\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("我们可以使用 "),a("strong",[e._v("docker ps")]),e._v(" 命令来查看容器名称。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('runoob@runoob:~$ docker ps -l\nCONTAINER ID     IMAGE            COMMAND           ...    PORTS                     NAMES\n43780a6eabaa     training/webapp   "python app.py"  ...     0.0.0.0:32769->5000/tcp   runoob\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h4",{attrs:{id:"新建网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建网络"}},[e._v("#")]),e._v(" 新建网络")]),e._v(" "),a("p",[e._v("下面先创建一个新的 Docker 网络。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker network create -d bridge test-net\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("参数说明：")]),e._v(" "),a("p",[a("strong",[e._v("-d")]),e._v("：参数指定 Docker 网络类型，有 bridge、overlay。")]),e._v(" "),a("p",[e._v("其中 overlay 网络类型用于 Swarm mode，在本小节中你可以忽略它。")]),e._v(" "),a("h4",{attrs:{id:"连接容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接容器"}},[e._v("#")]),e._v(" 连接容器")]),e._v(" "),a("p",[e._v("运行一个容器并连接到新建的 test-net 网络:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run -itd --name test1 --network test-net ubuntu /bin/bash\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("打开新的终端，再运行一个容器并加入到 test-net 网络:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run -itd --name test2 --network test-net ubuntu /bin/bash\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"配置-dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-dns"}},[e._v("#")]),e._v(" 配置 DNS")]),e._v(" "),a("p",[e._v("我们可以在宿主机的 /etc/docker/daemon.json 文件中增加以下内容来设置全部容器的 DNS：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  "dns" : [\n    "114.114.114.114",\n    "8.8.8.8"\n  ]\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("设置后，启动容器的 DNS 会自动配置为 114.114.114.114 和 8.8.8.8。")]),e._v(" "),a("p",[e._v("配置完，需要重启 docker 才能生效。")]),e._v(" "),a("p",[e._v("查看容器的 DNS 是否生效可以使用以下命令，它会输出容器的 DNS 信息：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run -it --rm  ubuntu  cat etc/resolv.conf\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("手动指定容器的配置")])]),e._v(" "),a("p",[e._v("如果只想在指定的容器设置 DNS，则可以使用以下命令：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run -it --rm -h host_ubuntu  --dns=114.114.114.114 --dns-search=test.com ubuntu\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("参数说明：")]),e._v(" "),a("p",[a("strong",[e._v("--rm")]),e._v("：容器退出时自动清理容器内部的文件系统。")]),e._v(" "),a("p",[a("strong",[e._v("-h HOSTNAME 或者 --hostname=HOSTNAME")]),e._v("： 设定容器的主机名，它会被写到容器内的 /etc/hostname 和 /etc/hosts。")]),e._v(" "),a("p",[a("strong",[e._v("--dns=IP_ADDRESS")]),e._v("： 添加 DNS 服务器到容器的 /etc/resolv.conf 中，让容器用这个服务器来解析所有不在 /etc/hosts 中的主机名。")]),e._v(" "),a("p",[a("strong",[e._v("--dns-search=DOMAIN")]),e._v("： 设定容器的搜索域，当设定搜索域为 .example.com 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 host.example.com。")]),e._v(" "),a("p",[e._v("如果在容器启动时没有指定 "),a("strong",[e._v("--dns")]),e._v(" 和 "),a("strong",[e._v("--dns-search")]),e._v("，Docker 会默认用宿主主机上的 /etc/resolv.conf 来配置容器的 DNS。")]),e._v(" "),a("h2",{attrs:{id:"docker-仓库管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-仓库管理"}},[e._v("#")]),e._v(" Docker 仓库管理")]),e._v(" "),a("p",[e._v("仓库（Repository）是集中存放镜像的地方。以下介绍一下 "),a("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),a("OutboundLink")],1),e._v("。当然不止 docker hub，只是远程的服务商不一样，操作都是一样的。")]),e._v(" "),a("h3",{attrs:{id:"docker-hub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-hub"}},[e._v("#")]),e._v(" Docker Hub")]),e._v(" "),a("p",[e._v("目前 Docker 官方维护了一个公共仓库 "),a("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Hub"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("p",[e._v("大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。")]),e._v(" "),a("h4",{attrs:{id:"注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册"}},[e._v("#")]),e._v(" 注册")]),e._v(" "),a("p",[e._v("在 "),a("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://hub.docker.com"),a("OutboundLink")],1),e._v(" 免费注册一个 Docker 账号。")]),e._v(" "),a("h4",{attrs:{id:"登录和退出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登录和退出"}},[e._v("#")]),e._v(" 登录和退出")]),e._v(" "),a("p",[e._v("登录需要输入用户名和密码，登录成功后，我们就可以从 docker hub 上拉取自己账号下的全部镜像。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker login\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("退出")])]),e._v(" "),a("p",[e._v("退出 docker hub 可以使用以下命令：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker logout\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("拉取镜像")]),e._v(" "),a("p",[e._v("你可以通过 docker search 命令来查找官方仓库中的镜像，并利用 docker pull 命令来将它下载到本地。")]),e._v(" "),a("p",[e._v("以 ubuntu 为关键词进行搜索：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker search ubuntu\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("使用 docker pull 将官方 ubuntu 镜像下载到本地：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker pull ubuntu \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h4",{attrs:{id:"推送镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推送镜像"}},[e._v("#")]),e._v(" 推送镜像")]),e._v(" "),a("p",[e._v("用户登录后，可以通过 docker push 命令将自己的镜像推送到 Docker Hub。")]),e._v(" "),a("p",[e._v("以下命令中的 username 请替换为你的 Docker 账号用户名。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker tag ubuntu:18.04 username/ubuntu:18.04\n$ docker image ls\n\nREPOSITORY      TAG        IMAGE ID            CREATED           ...  \nubuntu          18.04      275d79972a86        6 days ago        ...  \nusername/ubuntu 18.04      275d79972a86        6 days ago        ...  \n$ docker push username/ubuntu:18.04\n$ docker search username/ubuntu\n\nNAME             DESCRIPTION       STARS         OFFICIAL    AUTOMATED\nusername/ubuntu\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("h2",{attrs:{id:"docker-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-dockerfile"}},[e._v("#")]),e._v(" Docker Dockerfile")]),e._v(" "),a("h3",{attrs:{id:"什么是-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dockerfile"}},[e._v("#")]),e._v(" 什么是 Dockerfile？")]),e._v(" "),a("p",[e._v("Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。")]),e._v(" "),a("h3",{attrs:{id:"使用-dockerfile-定制镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-定制镜像"}},[e._v("#")]),e._v(" 使用 Dockerfile 定制镜像")]),e._v(" "),a("p",[e._v("这里仅讲解如何运行 Dockerfile 文件来定制一个镜像，具体 Dockerfile 文件内指令详解，将在下一节中介绍，这里你只要知道构建的流程即可。")]),e._v(" "),a("p",[a("strong",[e._v("1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）")])]),e._v(" "),a("p",[e._v("在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("FROM nginx\nRUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[a("strong",[e._v("2、FROM 和 RUN 指令的作用")])]),e._v(" "),a("p",[a("strong",[e._v("FROM")]),e._v("：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。")]),e._v(" "),a("p",[a("strong",[e._v("RUN")]),e._v("：用于执行后面跟着的命令行命令。有以下俩种格式：")]),e._v(" "),a("p",[e._v("shell 格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("RUN <命令行命令>    \n<命令行命令> 等同于，在终端操作的 shell 命令。\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("exec 格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('RUN ["可执行文件", "参数1", "参数2"]\n例如：    \nRUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[a("strong",[e._v("注意")]),e._v("：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：")]),e._v(" "),a("p",[e._v('FROM centos\nRUN yum -y install wget\nRUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz"\nRUN tar -xvf redis.tar.gz')]),e._v(" "),a("p",[e._v("以上执行会创建 3 层镜像。可简化为以下格式：")]),e._v(" "),a("p",[e._v("FROM centos\nRUN yum -y install wget "),a("br"),e._v('\n&& wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz" '),a("br"),e._v("\n&& tar -xvf redis.tar.gz")]),e._v(" "),a("p",[e._v("如上，以 && 符号连接命令，这样执行后，只会创建 1 层镜像。")]),e._v(" "),a("h3",{attrs:{id:"开始构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始构建镜像"}},[e._v("#")]),e._v(" 开始构建镜像")]),e._v(" "),a("p",[e._v("在 Dockerfile 文件的存放目录下，执行构建动作。")]),e._v(" "),a("p",[e._v("以下示例，通过目录下的 Dockerfile 构建一个 nginx:v3（镜像名称:镜像标签）。")]),e._v(" "),a("p",[a("strong",[e._v("注")]),e._v("：最后的 . 代表本次执行的上下文路径，下一节会介绍。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker build -t nginx:v3 .\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://www.runoob.com/wp-content/uploads/2019/11/dockerfile2.png",alt:""}})]),e._v(" "),a("p",[e._v("以上显示，说明已经构建成功。")]),e._v(" "),a("h3",{attrs:{id:"上下文路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下文路径"}},[e._v("#")]),e._v(" 上下文路径")]),e._v(" "),a("p",[e._v("上一节中，有提到指令最后一个 . 是上下文路径，那么什么是上下文路径呢？")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker build -t nginx:v3 .\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。")]),e._v(" "),a("p",[a("strong",[e._v("解析")]),e._v("：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。")]),e._v(" "),a("p",[e._v("如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。")]),e._v(" "),a("p",[a("strong",[e._v("注意")]),e._v("：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。")]),e._v(" "),a("h3",{attrs:{id:"指令详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令详解"}},[e._v("#")]),e._v(" 指令详解")]),e._v(" "),a("h4",{attrs:{id:"copy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[e._v("#")]),e._v(" COPY")]),e._v(" "),a("p",[e._v("复制指令，从上下文目录中复制文件或者目录到容器里指定路径。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('COPY [--chown=<user>:<group>] <源路径1>...  <目标路径>\nCOPY [--chown=<user>:<group>] ["<源路径1>",...  "<目标路径>"]\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[a("strong",[a("code",[e._v("[--chown=<user>:<group>]")])]),e._v("：可选参数，用户改变复制到容器内文件的拥有者和属组。")]),e._v(" "),a("p",[a("strong",[e._v("<源路径>")]),e._v("：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("COPY hom* /mydir/\nCOPY hom?.txt /mydir/\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[a("strong",[e._v("<目标路径>")]),e._v("：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。")]),e._v(" "),a("h4",{attrs:{id:"add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[e._v("#")]),e._v(" ADD")]),e._v(" "),a("p",[e._v("ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：")]),e._v(" "),a("ul",[a("li",[e._v("ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。")]),e._v(" "),a("li",[e._v("ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。")])]),e._v(" "),a("h4",{attrs:{id:"cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[e._v("#")]),e._v(" CMD")]),e._v(" "),a("p",[e._v("类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:")]),e._v(" "),a("ul",[a("li",[e._v("CMD 在docker run 时运行。")]),e._v(" "),a("li",[e._v("RUN 是在 docker build。")])]),e._v(" "),a("p",[a("strong",[e._v("作用")]),e._v("：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。")]),e._v(" "),a("p",[a("strong",[e._v("注意")]),e._v("：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('CMD <shell 命令> \nCMD ["<可执行文件或命令>","<param1>","<param2>",...] \nCMD ["<param1>","<param2>",...]  # 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。")]),e._v(" "),a("h4",{attrs:{id:"entrypoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[e._v("#")]),e._v(" ENTRYPOINT")]),e._v(" "),a("p",[e._v("类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。")]),e._v(" "),a("p",[e._v("但是, 如果运行 docker run 时使用了 --entrypoint 选项，将覆盖 CMD 指令指定的程序。")]),e._v(" "),a("p",[a("strong",[e._v("优点")]),e._v("：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。")]),e._v(" "),a("p",[a("strong",[e._v("注意")]),e._v("：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ENTRYPOINT ["<executeable>","<param1>","<param2>",...]\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。")]),e._v(" "),a("p",[e._v("示例：")]),e._v(" "),a("p",[e._v("假设已通过 Dockerfile 构建了 nginx:test 镜像：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM nginx\n\nENTRYPOINT ["nginx", "-c"] # 定参\nCMD ["/etc/nginx/nginx.conf"] # 变参 \n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("1、不传参运行")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run  nginx:test\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("容器内会默认运行以下命令，启动主进程。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("nginx -c /etc/nginx/nginx.conf\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("2、传参运行")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run  nginx:test -c /etc/nginx/new.conf\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("nginx -c /etc/nginx/new.conf\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h4",{attrs:{id:"env"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[e._v("#")]),e._v(" ENV")]),e._v(" "),a("p",[e._v("设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ENV <key> <value>\nENV <key1>=<value1> <key2>=<value2>...\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ENV NODE_VERSION 7.2.0\n\nRUN curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz" \\\n  && curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h4",{attrs:{id:"arg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arg"}},[e._v("#")]),e._v(" ARG")]),e._v(" "),a("p",[e._v("构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。")]),e._v(" "),a("p",[e._v("构建命令 docker build 中可以用 --build-arg <参数名>=<值> 来覆盖。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ARG <参数名>[=<默认值>]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h4",{attrs:{id:"volume"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[e._v("#")]),e._v(" VOLUME")]),e._v(" "),a("p",[e._v("定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。")]),e._v(" "),a("p",[e._v("作用：")]),e._v(" "),a("ul",[a("li",[e._v("避免重要的数据，因容器重启而丢失，这是非常致命的。")]),e._v(" "),a("li",[e._v("避免容器不断变大。")])]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('VOLUME ["<路径1>", "<路径2>"...]\nVOLUME <路径>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。")]),e._v(" "),a("h4",{attrs:{id:"expose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[e._v("#")]),e._v(" EXPOSE")]),e._v(" "),a("p",[e._v("仅仅只是声明端口。")]),e._v(" "),a("p",[e._v("作用：")]),e._v(" "),a("ul",[a("li",[e._v("帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。")]),e._v(" "),a("li",[e._v("在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。")])]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EXPOSE <端口1> [<端口2>...]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h4",{attrs:{id:"workdir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[e._v("#")]),e._v(" WORKDIR")]),e._v(" "),a("p",[e._v("指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。")]),e._v(" "),a("p",[e._v("docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("WORKDIR <工作目录路径>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h4",{attrs:{id:"user"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user"}},[e._v("#")]),e._v(" USER")]),e._v(" "),a("p",[e._v("用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("USER <用户名>[:<用户组>]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h4",{attrs:{id:"healthcheck"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck"}},[e._v("#")]),e._v(" HEALTHCHECK")]),e._v(" "),a("p",[e._v("用于指定某个程序或者指令来监控 docker 容器服务的运行状态。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令\nHEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令\n\nHEALTHCHECK [选项] CMD <命令> : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h4",{attrs:{id:"onbuild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onbuild"}},[e._v("#")]),e._v(" ONBUILD")]),e._v(" "),a("p",[e._v("用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。")]),e._v(" "),a("p",[e._v("格式：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ONBUILD <其它指令>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h4",{attrs:{id:"label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#label"}},[e._v("#")]),e._v(" LABEL")]),e._v(" "),a("p",[e._v("LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("LABEL <key>=<value> <key>=<value> <key>=<value> ...\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("比如我们可以添加镜像的作者：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('LABEL org.opencontainers.image.authors="runoob"\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])}),[],!1,null,null,null);s.default=r.exports}}]);