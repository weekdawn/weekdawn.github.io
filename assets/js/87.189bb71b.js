(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{693:function(a,s,t){"use strict";t.r(s);var n=t(7),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 是 Scalable Language 的简写，是一门多范式的编程语言")]),a._v(" "),t("p",[a._v("联邦理工学院洛桑（EPFL）的Martin Odersky于2001年基于Funnel的工作开始设计Scala。")]),a._v(" "),t("p",[a._v("Funnel是把函数式编程思想和Petri网相结合的一种编程语言。")])]),a._v(" "),t("h3",{attrs:{id:"scala特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala特性"}},[a._v("#")]),a._v(" Scala特性")]),a._v(" "),t("blockquote",[t("h4",{attrs:{id:"面向对象特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象特性"}},[a._v("#")]),a._v(" 面向对象特性")]),a._v(" "),t("p",[a._v("Scala是一种纯面向对象的语言，每个值都是对象。对象的数据类型以及行为由类和特质描述。")]),a._v(" "),t("p",[a._v("类抽象机制的扩展有两种途径：一种途径是子类继承，另一种途径是灵活的混入机制。这两种途径能避免多重继承的种种问题。")]),a._v(" "),t("h4",{attrs:{id:"函数式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[a._v("#")]),a._v(" 函数式编程")]),a._v(" "),t("p",[a._v("Scala也是一种函数式语言，其函数也能当成值来使用。Scala提供了轻量级的语法用以定义匿名函数，支持高阶函数，允许嵌套多层函数，并支持柯里化。Scala的case class及其内置的模式匹配相当于函数式编程语言中常用的代数类型。")]),a._v(" "),t("p",[a._v("更进一步，程序员可以利用Scala的模式匹配，编写类似正则表达式的代码处理XML数据。")]),a._v(" "),t("h4",{attrs:{id:"静态类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态类型"}},[a._v("#")]),a._v(" 静态类型")]),a._v(" "),t("p",[a._v("Scala具备类型系统，通过编译时检查，保证代码的安全性和一致性。")]),a._v(" "),t("h3",{attrs:{id:"扩展性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展性"}},[a._v("#")]),a._v(" 扩展性")]),a._v(" "),t("p",[a._v("Scala的设计秉承一项事实，即在实践中，某个领域特定的应用程序开发往往需要特定于该领域的语言扩展。Scala提供了许多独特的语言机制，可以以库的形式轻易无缝添加新的语言结构：")]),a._v(" "),t("ul",[t("li",[a._v("任何方法可用作前缀或后缀操作符")]),a._v(" "),t("li",[a._v("可以根据预期类型自动构造闭包。")])]),a._v(" "),t("h3",{attrs:{id:"并发性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发性"}},[a._v("#")]),a._v(" 并发性")]),a._v(" "),t("p",[a._v("Scala使用Actor作为其并发模型，Actor是类似线程的实体，通过邮箱发收消息。Actor可以复用线程，因此可以在程序中可以使用数百万个Actor,而线程只能创建数千个。在2.10之后的版本中，使用Akka作为其默认Actor实现。")]),a._v(" "),t("h3",{attrs:{id:"谁使用了-scala"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谁使用了-scala"}},[a._v("#")]),a._v(" 谁使用了 Scala")]),a._v(" "),t("ul",[t("li",[a._v("2009年4月，Twitter宣布他们已经把大部分后端程序从Ruby迁移到Scala，其余部分也打算要迁移。")]),a._v(" "),t("li",[a._v("此外，Wattzon已经公开宣称，其整个平台都已经是基于Scala基础设施编写的。")]),a._v(" "),t("li",[a._v("瑞银集团把Scala用于一般产品中。")]),a._v(" "),t("li",[a._v("Coursera把Scala作为服务器语言使用。")])])]),a._v(" "),t("h3",{attrs:{id:"基础语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[a._v("#")]),a._v(" 基础语法")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 与 Java 的最大区别是：Scala 语句末尾的分号 ; 是可选的。")]),a._v(" "),t("p",[a._v("scala的helloworld.scala")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("object HelloWorld {\n   /* 这是我的第一个 Scala 程序\n    * 以下程序将输出'Hello World!' \n    */\n   def main(args: Array[String]) {\n      println(\"Hello, world!\") // 输出 Hello World\n   }\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"基本语法需要注意以下几点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本语法需要注意以下几点"}},[a._v("#")]),a._v(" 基本语法需要注意以下几点：")]),a._v(" "),t("blockquote",[t("ul",[t("li",[t("p",[t("strong",[a._v("区分大小写")]),a._v(" -  Scala是大小写敏感的，这意味着标识Hello 和 hello在Scala中会有不同的含义。")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("类名")]),a._v(" - 对于所有的类名的第一个字母要大写。\n如果需要使用几个单词来构成一个类的名称，每个单词的第一个字母要大写。")]),a._v(" "),t("p",[a._v("示例："),t("em",[a._v("class MyFirstScalaClass")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("方法名称")]),a._v(" - 所有的方法名称的第一个字母用小写。\n如果若干单词被用于构成方法的名称，则每个单词的第一个字母应大写。")]),a._v(" "),t("p",[a._v("示例："),t("em",[a._v("def myMethodName()")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("程序文件名")]),a._v(' - 程序文件的名称应该与对象名称完全匹配(新版本不需要了，但建议保留这种习惯)。\n保存文件时，应该保存它使用的对象名称（记住Scala是区分大小写），并追加".scala"为文件扩展名。 （如果文件名和对象名称不匹配，程序将无法编译）。')]),a._v(" "),t("p",[a._v('示例: 假设"HelloWorld"是对象的名称。那么该文件应保存为\'HelloWorld.scala"')])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("def main(args: Array[String])")]),a._v(" - Scala程序从main()方法开始处理，这是每一个Scala程序的强制程序入口部分。")])])])]),a._v(" "),t("h4",{attrs:{id:"标识符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[a._v("#")]),a._v(" 标识符")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 可以使用两种形式的标志符，字符数字和符号。")]),a._v(" "),t("p",[a._v('字符数字使用字母或是下划线开头，后面可以接字母或是数字，符号"$"在 Scala 中也看作为字母。然而以"$"开头的标识符为保留的 Scala 编译器产生的标志符使用，应用程序应该避免使用"$"开始的标识符，以免造成冲突。')]),a._v(" "),t("p",[a._v("Scala 的命名规则采用和 Java 类似的 camel 命名规则，首字符小写，比如 toString。类名的首字符还是使用大写。此外也应该避免使用以下划线结尾的标志符以避免冲突。符号标志符包含一个或多个符号，如+，:，? 等")])]),a._v(" "),t("h4",{attrs:{id:"关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[a._v("#")]),a._v(" 关键字")]),a._v(" "),t("blockquote",[t("table",[t("thead",[t("tr",[t("th"),a._v(" "),t("th"),a._v(" "),t("th"),a._v(" "),t("th")])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("abstract")]),a._v(" "),t("td",[a._v("case")]),a._v(" "),t("td",[a._v("catch")]),a._v(" "),t("td",[a._v("class")])]),a._v(" "),t("tr",[t("td",[a._v("def")]),a._v(" "),t("td",[a._v("do")]),a._v(" "),t("td",[a._v("else")]),a._v(" "),t("td",[a._v("extends")])]),a._v(" "),t("tr",[t("td",[a._v("false")]),a._v(" "),t("td",[a._v("final")]),a._v(" "),t("td",[a._v("finally")]),a._v(" "),t("td",[a._v("for")])]),a._v(" "),t("tr",[t("td",[a._v("forSome")]),a._v(" "),t("td",[a._v("if")]),a._v(" "),t("td",[a._v("implicit")]),a._v(" "),t("td",[a._v("import")])]),a._v(" "),t("tr",[t("td",[a._v("lazy")]),a._v(" "),t("td",[a._v("match")]),a._v(" "),t("td",[a._v("new")]),a._v(" "),t("td",[a._v("null")])]),a._v(" "),t("tr",[t("td",[a._v("object")]),a._v(" "),t("td",[a._v("override")]),a._v(" "),t("td",[a._v("package")]),a._v(" "),t("td",[a._v("private")])]),a._v(" "),t("tr",[t("td",[a._v("protected")]),a._v(" "),t("td",[a._v("return")]),a._v(" "),t("td",[a._v("sealed")]),a._v(" "),t("td",[a._v("super")])]),a._v(" "),t("tr",[t("td",[a._v("this")]),a._v(" "),t("td",[a._v("throw")]),a._v(" "),t("td",[a._v("trait")]),a._v(" "),t("td",[a._v("try")])]),a._v(" "),t("tr",[t("td",[a._v("true")]),a._v(" "),t("td",[a._v("type")]),a._v(" "),t("td",[a._v("val")]),a._v(" "),t("td",[a._v("var")])]),a._v(" "),t("tr",[t("td",[a._v("while")]),a._v(" "),t("td",[a._v("with")]),a._v(" "),t("td",[a._v("yield")]),a._v(" "),t("td")]),a._v(" "),t("tr",[t("td",[a._v("-")]),a._v(" "),t("td",[a._v(":")]),a._v(" "),t("td",[a._v("=")]),a._v(" "),t("td",[a._v("=>")])]),a._v(" "),t("tr",[t("td",[a._v("<-")]),a._v(" "),t("td",[a._v("<:")]),a._v(" "),t("td",[a._v("<%")]),a._v(" "),t("td",[a._v(">:")])]),a._v(" "),t("tr",[t("td",[a._v("#")]),a._v(" "),t("td",[a._v("@")]),a._v(" "),t("td"),a._v(" "),t("td")])])])]),a._v(" "),t("h4",{attrs:{id:"注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[a._v("#")]),a._v(" 注释")]),a._v(" "),t("blockquote",[t("p",[a._v("// 或者/*  */")])]),a._v(" "),t("h4",{attrs:{id:"空行和空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空行和空格"}},[a._v("#")]),a._v(" 空行和空格")]),a._v(" "),t("blockquote",[t("p",[a._v("一行中只有空格或者带有注释，Scala 会认为其是空行，会忽略它。标记可以被空格或者注释来分割。")])]),a._v(" "),t("h4",{attrs:{id:"换行符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#换行符"}},[a._v("#")]),a._v(" 换行符")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala是面向行的语言，语句可以用分号（;）结束或换行符。Scala 程序里,语句末尾的分号通常是可选的。如果你愿意可以输入一个,但若一行里仅 有一个语句也可不写。另一方面,如果一行里写多个语句那么分号是需要的。例如")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('val s = "weekdawn"; println(s)\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"scala包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala包"}},[a._v("#")]),a._v(" Scala包")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 使用 package 关键字定义包，在Scala将代码定义到某个包中有两种方式：")]),a._v(" "),t("p",[a._v("第一种方法和 Java 一样，在文件的头定义包名，这种方法就后续所有代码都放在该包中。 比如：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("package com.runoob\nclass HelloWorld\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("第二种方法有些类似 C#，如：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("package com.runoob {\n  class HelloWorld \n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("第二种方法，可以在一个文件中定义多个包。")])]),a._v(" "),t("h4",{attrs:{id:"引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[a._v("#")]),a._v(" 引用")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 使用 import 关键字引用包。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import java.awt.Color  // 引入Color\n \nimport java.awt._  // 引入包内所有成员\n \ndef handler(evt: event.ActionEvent) { // java.awt.event.ActionEvent\n  ...  // 因为引入了java.awt，所以可以省去前面的部分\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("import语句可以出现在任何地方，而不是只能在文件顶部。import的效果从开始延伸到语句块的结束。这可以大幅减少名称冲突的可能性。")]),a._v(" "),t("p",[a._v("如果想要引入包中的几个成员，可以使用selector（选取器）：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import java.awt.{Color, Font}\n \n// 重命名成员\nimport java.util.{HashMap => JavaHashMap}\n \n// 隐藏成员\nimport java.util.{HashMap => _, _} // 引入了util包的所有成员，但是HashMap被隐藏了\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("blockquote",[t("p",[a._v("**注意：**默认情况下，Scala 总会引入 java.lang._ 、 scala._ 和 Predef._，这里也能解释，为什么以scala开头的包，在使用时都是省去scala.的。")])])]),a._v(" "),t("h3",{attrs:{id:"scala数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala数据类型"}},[a._v("#")]),a._v(" Scala数据类型")]),a._v(" "),t("blockquote",[t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("数据类型")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("描述")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Byte")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("8位有符号补码整数。数值区间为 -128 到 127")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Short")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("16位有符号补码整数。数值区间为 -32768 到 32767")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Int")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("32位有符号补码整数。数值区间为 -2147483648 到 2147483647")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Long")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("64位有符号补码整数。数值区间为 -9223372036854775808 到 9223372036854775807")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Float")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("32 位, IEEE 754 标准的单精度浮点数")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Double")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("64 位 IEEE 754 标准的双精度浮点数")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Char")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("16位无符号Unicode字符, 区间值为 U+0000 到 U+FFFF")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("String")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("字符序列")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Boolean")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("true或false")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Unit")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("表示无值，和其他语言中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Null")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("null 或空引用")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Nothing")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("Nothing类型在Scala的类层级的最低端；它是任何其他类型的子类型。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("Any")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("Any是所有其他类的超类")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("AnyRef")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("AnyRef类是Scala里所有引用类(reference class)的基类")])])])])]),a._v(" "),t("h4",{attrs:{id:"scala基础字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala基础字面量"}},[a._v("#")]),a._v(" Scala基础字面量")]),a._v(" "),t("blockquote",[t("h3",{attrs:{id:"整型字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#整型字面量"}},[a._v("#")]),a._v(" 整型字面量")]),a._v(" "),t("p",[a._v("整型字面量用于 Int 类型，如果表示 Long，可以在数字后面添加 L 或者小写 l 作为后缀。：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("0\n035\n21 \n0xFFFFFFFF \n0777L\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"浮点型字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浮点型字面量"}},[a._v("#")]),a._v(" 浮点型字面量")]),a._v(" "),t("p",[a._v("如果浮点数后面有f或者F后缀时，表示这是一个Float类型，否则就是一个Double类型的。实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("0.0 \n1e30f \n3.14159f \n1.0e100\n.1\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"布尔型字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔型字面量"}},[a._v("#")]),a._v(" 布尔型字面量")]),a._v(" "),t("p",[a._v("布尔型字面量有 true 和 false。")]),a._v(" "),t("h3",{attrs:{id:"符号字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#符号字面量"}},[a._v("#")]),a._v(" 符号字面量")]),a._v(" "),t("p",[a._v("符号字面量被写成： "),t("strong",[a._v("'<标识符>")]),a._v(" ，这里 "),t("strong",[a._v("<标识符>")]),a._v(" 可以是任何字母或数字的标识（注意：不能以数字开头）。这种字面量被映射成预定义类scala.Symbol的实例。")]),a._v(" "),t("p",[a._v("如： 符号字面量 "),t("strong",[a._v('\'x****scala.Symbol("x")')])]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('package scala\nfinal case class Symbol private (name: String) {\n   override def toString: String = "\'" + name\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h3",{attrs:{id:"字符字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符字面量"}},[a._v("#")]),a._v(" 字符字面量")]),a._v(" "),t("p",[a._v("在 Scala 字符变量使用单引号 "),t("strong",[a._v("'")]),a._v(" 来定义，如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("'a' \n'\\u0041'\n'\\n'\n'\\t'\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("其中 *"),t("em",[a._v("*")]),a._v(" 表示转义字符，其后可以跟 "),t("strong",[a._v("u0041")]),a._v(" 数字或者 "),t("strong",[a._v("\\r\\n")]),a._v(" 等固定的转义字符。")]),a._v(" "),t("h3",{attrs:{id:"字符串字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串字面量"}},[a._v("#")]),a._v(" 字符串字面量")]),a._v(" "),t("p",[a._v("在 Scala 字符串变量使用双引号 "),t("strong",[a._v('"')]),a._v(" 来定义，如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('"Hello,\\nWorld!"\n"菜鸟教程官网：www.runoob.com"\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("h3",{attrs:{id:"多行字符串的表示方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多行字符串的表示方法"}},[a._v("#")]),a._v(" 多行字符串的表示方法")]),a._v(" "),t("p",[a._v("多行字符串用三个双引号来表示分隔符，格式为："),t("strong",[a._v('""" ... """')]),a._v("。")]),a._v(" "),t("p",[a._v("实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('val foo = """菜鸟教程\nwww.runoob.com\nwww.w3cschool.cc\nwww.runnoob.com\n以上三个地址都能访问"""\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("h3",{attrs:{id:"null-值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#null-值"}},[a._v("#")]),a._v(" Null 值")]),a._v(" "),t("p",[a._v("空值是 scala.Null 类型。")]),a._v(" "),t("p",[a._v('Scala.Null和scala.Nothing是用统一的方式处理Scala面向对象类型系统的某些"边界情况"的特殊类型。')]),a._v(" "),t("p",[a._v("Null类是null引用对象的类型，它是每个引用类（继承自AnyRef的类）的子类。Null不兼容值类型。")])]),a._v(" "),t("h4",{attrs:{id:"转义字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[a._v("#")]),a._v(" 转义字符")]),a._v(" "),t("blockquote",[t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("转义字符")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("Unicode")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("描述")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\b")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("\\u0008")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("退格(BS) ，将当前位置移到前一列")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\t")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("\\u0009")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("水平制表(HT) （跳到下一个TAB位置）")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\n")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("\\u000a")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("换行(LF) ，将当前位置移到下一行开头")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\f")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("\\u000c")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("换页(FF)，将当前位置移到下页开头")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\r")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("\\u000d")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("回车(CR) ，将当前位置移到本行开头")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v('"')]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("\\u0022")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('代表一个双引号(")字符')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("'")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("\\u0027")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("代表一个单引号（'）字符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("\\u005c")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("代表一个反斜线字符 ''")])])])])]),a._v(" "),t("h3",{attrs:{id:"scala变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala变量"}},[a._v("#")]),a._v(" Scala变量")]),a._v(" "),t("blockquote",[t("p",[a._v("在 Scala 中，使用关键词 "),t("strong",[a._v('"var"')]),a._v(" 声明变量，使用关键词 "),t("strong",[a._v('"val"')]),a._v(" 声明常量。")]),a._v(" "),t("p",[a._v("声明变量实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var myVar : String = "Foo"\nvar myVar : String = "Too"\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("以上定义了变量 myVar，我们可以修改它。")]),a._v(" "),t("p",[a._v("声明常量实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('val myVal : String = "Foo"\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("以上定义了常量 myVal，它是不能修改的。如果程序尝试修改常量 myVal 的值，程序将会在编译时报错。")])]),a._v(" "),t("h4",{attrs:{id:"变量类型声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量类型声明"}},[a._v("#")]),a._v(" 变量类型声明")]),a._v(" "),t("blockquote",[t("p",[a._v("变量的类型在变量名之后等号之前声明。定义变量的类型的语法格式如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var VariableName : DataType [=  Initial Value]\n\n或\n\nval VariableName : DataType [=  Initial Value]\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"变量类型引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量类型引用"}},[a._v("#")]),a._v(" 变量类型引用")]),a._v(" "),t("blockquote",[t("p",[a._v("在 Scala 中声明变量和常量不一定要指明数据类型，在没有指明数据类型的情况下，其数据类型是通过变量或常量的初始值推断出来的。")]),a._v(" "),t("p",[a._v("所以，如果在没有指明数据类型的情况下声明变量或常量必须要给出其初始值，否则将会报错。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var myVar = 10;\nval myVal = "Hello, Scala!";\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("以上实例中，myVar 会被推断为 Int 类型，myVal 会被推断为 String 类型。")])]),a._v(" "),t("h4",{attrs:{id:"scala多个变量声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala多个变量声明"}},[a._v("#")]),a._v(" Scala多个变量声明")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 支持多个变量的声明：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("val xmax, ymax = 100  // xmax, ymax都声明为100\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("如果方法返回值是元组，我们可以使用 val 来声明一个元组：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('scala> val pa = (40,"Foo")\npa: (Int, String) = (40,Foo)\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala访问修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala访问修饰符"}},[a._v("#")]),a._v(" Scala访问修饰符")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 访问修饰符基本和Java的一样，分别有：private，protected，public。")]),a._v(" "),t("p",[a._v("如果没有指定访问修饰符，默认情况下，Scala 对象的访问级别都是 public。")]),a._v(" "),t("p",[a._v("Scala 中的 private 限定符，比 Java 更严格，在嵌套类情况下，外层类甚至不能访问被嵌套类的私有成员。")])]),a._v(" "),t("h4",{attrs:{id:"private成员"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#private成员"}},[a._v("#")]),a._v(" Private成员")]),a._v(" "),t("blockquote",[t("p",[a._v("用 private 关键字修饰，带有此标记的成员"),t("strong",[a._v("仅在包含了成员定义的类或对象内部")]),a._v("可见，同样的规则还适用内部类。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('class Outer{\n    class Inner{\n    private def f(){println("f")}\n    class InnerMost{\n        f() // 正确\n        }\n    }\n    (new Inner).f() //错误\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"protected成员"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#protected成员"}},[a._v("#")]),a._v(" Protected成员")]),a._v(" "),t("blockquote",[t("p",[a._v("在 scala 中，对保护（Protected）成员的访问比 java 更严格一些。因为它只允许保护成员在定义了该成员的的"),t("strong",[a._v("类的子类中被访问")]),a._v("。而在java中，用protected关键字修饰的成员，除了定义了该成员的类的子类可以访问，同一个包里的其他类也可以进行访问。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('package p{\nclass Super{\n    protected def f() {println("f")}\n    }\n    class Sub extends Super{\n        f()\n    }\n    class Other{\n        (new Super).f() //错误\n    }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"public成员"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#public成员"}},[a._v("#")]),a._v(" Public成员")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala中，如果没有指定任何的修饰符，则默认为 public。这样的成员在任何地方都可以被访问。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('class Outer {\n   class Inner {\n      def f() { println("f") }\n      class InnerMost {\n         f() // 正确\n      }\n   }\n   (new Inner).f() // 正确因为 f() 是 public\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala运算符"}},[a._v("#")]),a._v(" Scala运算符")]),a._v(" "),t("blockquote",[t("p",[a._v("略")])]),a._v(" "),t("h3",{attrs:{id:"scala-if-else"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-if-else"}},[a._v("#")]),a._v(" Scala IF...ELSE")]),a._v(" "),t("blockquote",[t("p",[a._v("略")])]),a._v(" "),t("h3",{attrs:{id:"scala循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala循环"}},[a._v("#")]),a._v(" Scala循环")]),a._v(" "),t("blockquote",[t("h4",{attrs:{id:"for循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for循环"}},[a._v("#")]),a._v(" For循环")]),a._v(" "),t("p",[a._v("Scala 语言中 "),t("strong",[a._v("for")]),a._v(" 循环的语法：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for( var x <- Range ){\n   statement(s);\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("以上语法中，"),t("strong",[a._v("Range")]),a._v(" 可以是一个数字区间表示 "),t("strong",[a._v("i to j")]),a._v(" ，或者 "),t("strong",[a._v("i until j")]),a._v("。左箭头 <- 用于为变量 x 赋值。")]),a._v(" "),t("h3",{attrs:{id:"实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[a._v("#")]),a._v(" 实例")]),a._v(" "),t("p",[a._v("以下是一个使用了 "),t("strong",[a._v("i to j")]),a._v(" 语法(包含 j)的实例:")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("object")]),a._v(" Test "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" main"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("args"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// for 循环")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("<-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" to "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n         println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Value of a: "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])])]),a._v(" "),t("blockquote",[t("p",[a._v("以下是一个使用了 "),t("strong",[a._v("i until j")]),a._v(" 语法(不包含 j)的实例:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      var a = 0;\n      // for 循环\n      for( a <- 1 until 10){\n         println( "Value of a: " + a );\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])])]),a._v(" "),t("blockquote",[t("p",[a._v("在 "),t("strong",[a._v("for 循环")]),a._v(" 中你可以使用分号 (😉 来设置多个区间，它将迭代给定区间所有的可能值。以下实例演示了两个区间的循环实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      var a = 0;\n      var b = 0;\n      // for 循环\n      for( a <- 1 to 3; b <- 1 to 3){\n         println( "Value of a: " + a );\n         println( "Value of b: " + b );\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])])]),a._v(" "),t("blockquote",[t("h2",{attrs:{id:"for-循环集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-循环集合"}},[a._v("#")]),a._v(" for 循环集合")]),a._v(" "),t("p",[a._v("for 循环集合的语法如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for( var x <- List ){\n   statement(s);\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("以上语法中， "),t("strong",[a._v("List")]),a._v(" 变量是一个集合，for 循环会迭代所有集合的元素。")]),a._v(" "),t("h3",{attrs:{id:"实例-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-2"}},[a._v("#")]),a._v(" 实例")]),a._v(" "),t("p",[a._v("以下实例将循环数字集合。我们使用 "),t("em",[a._v("List()")]),a._v(" 来创建集合。再以后章节我们会详细介绍集合。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      var a = 0;\n      val numList = List(1,2,3,4,5,6);\n\n      // for 循环\n      for( a <- numList ){\n         println( "Value of a: " + a );\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])])]),a._v(" "),t("blockquote",[t("h2",{attrs:{id:"for-循环过滤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-循环过滤"}},[a._v("#")]),a._v(" for 循环过滤")]),a._v(" "),t("p",[a._v("Scala 可以使用一个或多个 "),t("strong",[a._v("if")]),a._v(" 语句来过滤一些元素。")]),a._v(" "),t("p",[a._v("以下是在 for 循环中使用过滤器的语法。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for( var x <- List\n      if condition1; if condition2...\n   ){\n   statement(s);\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("你可以使用分号(;)来为表达式添加一个或多个的过滤条件。")]),a._v(" "),t("h3",{attrs:{id:"实例-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-3"}},[a._v("#")]),a._v(" 实例")]),a._v(" "),t("p",[a._v("以下是 for 循环中过滤的实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      var a = 0;\n      val numList = List(1,2,3,4,5,6,7,8,9,10);\n\n      // for 循环\n      for( a <- numList\n           if a != 3; if a < 8 ){\n         println( "Value of a: " + a );\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br")])])]),a._v(" "),t("blockquote",[t("h2",{attrs:{id:"for-使用-yield"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-使用-yield"}},[a._v("#")]),a._v(" for 使用 yield")]),a._v(" "),t("p",[a._v("你可以将 for 循环的返回值作为一个变量存储。语法格式如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var retVal = for{ var x <- List\n     if condition1; if condition2...\n}yield x\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("注意大括号中用于保存变量和条件，"),t("em",[a._v("retVal")]),a._v(" 是变量， 循环中的 yield 会把当前的元素记下来，保存在集合中，循环结束后将返回该集合。")]),a._v(" "),t("h3",{attrs:{id:"实例-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-4"}},[a._v("#")]),a._v(" 实例")]),a._v(" "),t("p",[a._v("以下实例演示了 for 循环中使用 yield：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      var a = 0;\n      val numList = List(1,2,3,4,5,6,7,8,9,10);\n\n      // for 循环\n      var retVal = for{ a <- numList \n                        if a != 3; if a < 8\n                      }yield a\n\n      // 输出返回值\n      for( a <- retVal){\n         println( "Value of a: " + a );\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala方法与函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala方法与函数"}},[a._v("#")]),a._v(" Scala方法与函数")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 有方法与函数，二者在语义上的区别很小。Scala 方法是类的一部分，而函数是一个对象可以赋值给一个变量。换句话来说在类中定义的函数即是方法。")]),a._v(" "),t("p",[a._v("Scala 中的方法跟 Java 的类似，方法是组成类的一部分。")]),a._v(" "),t("p",[a._v("Scala 中的函数则是一个完整的对象，Scala 中的函数其实就是继承了 Trait 的类的对象。")]),a._v(" "),t("p",[a._v("Scala 中使用 "),t("strong",[a._v("val")]),a._v(" 语句可以定义函数，"),t("strong",[a._v("def")]),a._v(" 语句定义方法。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class Test{\n  def m(x: Int) = x + 3\n  val f = (x: Int) => x + 3\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"方法声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法声明"}},[a._v("#")]),a._v(" 方法声明")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 方法声明格式如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("def functionName ([参数列表]) : [return type]\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("如果你不写等于号和方法主体，那么方法会被隐式声明为"),t("strong",[a._v("抽象(abstract)")]),a._v("，包含它的类型于是也是一个抽象类型。")])]),a._v(" "),t("h4",{attrs:{id:"方法定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法定义"}},[a._v("#")]),a._v(" 方法定义")]),a._v(" "),t("blockquote",[t("p",[a._v("方法定义由一个 "),t("strong",[a._v("def")]),a._v(" 关键字开始，紧接着是可选的参数列表，一个冒号 "),t("strong",[a._v(":")]),a._v(" 和方法的返回类型，一个等于号 "),t("strong",[a._v("=")]),a._v(" ，最后是方法的主体。")]),a._v(" "),t("p",[a._v("Scala 方法定义格式如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("def functionName ([参数列表]) : [return type] = {\n   function body\n   return [expr]\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("以上代码中 "),t("strong",[a._v("return type")]),a._v(" 可以是任意合法的 Scala 数据类型。参数列表中的参数可以使用逗号分隔。")]),a._v(" "),t("p",[a._v("以下方法的功能是将两个传入的参数相加并求和：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("object add{\n   def addInt( a:Int, b:Int ) : Int = {\n      var sum:Int = 0\n      sum = a + b\n\n      return sum\n   }\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("如果方法没有返回值，可以返回为 "),t("strong",[a._v("Unit")]),a._v("，这个类似于 Java 的 "),t("strong",[a._v("void")]),a._v(", 实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Hello{\n   def printMe( ) : Unit = {\n      println("Hello, Scala!")\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"方法调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法调用"}},[a._v("#")]),a._v(" 方法调用")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 提供了多种不同的方法调用方式：")]),a._v(" "),t("p",[a._v("以下是调用方法的标准格式：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("functionName( 参数列表 )\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("如果方法使用了实例的对象来调用，我们可以使用类似java的格式 (使用 "),t("strong",[a._v(".")]),a._v(" 号)：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[instance.]functionName( 参数列表 )\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("以上实例演示了定义与调用方法的实例:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n        println( "Returned Value : " + addInt(5,7) );\n   }\n   def addInt( a:Int, b:Int ) : Int = {\n      var sum:Int = 0\n      sum = a + b\n\n      return sum\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"scala闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala闭包"}},[a._v("#")]),a._v(" Scala闭包")]),a._v(" "),t("blockquote",[t("p",[a._v("闭包是一个函数，返回值依赖于声明在函数外部的一个或多个变量。")]),a._v(" "),t("p",[a._v("闭包通常来讲可以简单的认为是可以访问一个函数里面局部变量的另外一个函数。")]),a._v(" "),t("p",[a._v("如下面这段匿名的函数：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("val multiplier = (i:Int) => i * 10  \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("函数体内有一个变量 i，它作为函数的一个参数。如下面的另一段代码：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("val multiplier = (i:Int) => i * factor\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("在 multiplier 中有两个变量：i 和 factor。其中的一个 i 是函数的形式参数，在 multiplier 函数被调用时，i 被赋予一个新的值。然而，factor不是形式参数，而是自由变量，考虑下面代码：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var factor = 3  \nval multiplier = (i:Int) => i * factor  \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("这里我们引入一个自由变量 factor，这个变量定义在函数外面。")]),a._v(" "),t("p",[a._v('这样定义的函数变量 multiplier 成为一个"闭包"，因为它引用到函数外面定义的变量，定义这个函数的过程是将这个自由变量捕获而构成一个封闭的函数。')]),a._v(" "),t("p",[a._v("完整实例")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {  \n   def main(args: Array[String]) {  \n      println( "muliplier(1) value = " +  multiplier(1) )  \n      println( "muliplier(2) value = " +  multiplier(2) )  \n   }  \n   var factor = 3  \n   val multiplier = (i:Int) => i * factor  \n}  \n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"scala字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala字符串"}},[a._v("#")]),a._v(" Scala字符串")]),a._v(" "),t("blockquote",[t("p",[a._v("以下实例将字符串赋值给一个常量：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   val greeting: String = "Hello,World!"\n\n   def main(args: Array[String]) {\n      println( greeting )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("以上实例定义了变量 greeting，为字符串常量，它的类型为 String (java.lang.String)。")]),a._v(" "),t("p",[a._v("在 Scala 中，字符串的类型实际上是 Java String，它本身没有 String 类。")]),a._v(" "),t("p",[a._v("在 Scala 中，String 是一个不可变的对象，所以该对象不可被修改。这就意味着你如果修改字符串就会产生一个新的字符串对象。")]),a._v(" "),t("p",[a._v("但其他对象，如数组就是可变的对象。接下来我们会为大家介绍常用的 java.lang.String 方法。")])]),a._v(" "),t("h4",{attrs:{id:"创建字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建字符串"}},[a._v("#")]),a._v(" 创建字符串")]),a._v(" "),t("blockquote",[t("p",[a._v("创建字符串实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var greeting = "Hello World!";\n\n或\n\nvar greeting:String = "Hello World!";\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("你不一定为字符串指定 String 类型，因为 Scala 编译器会自动推断出字符串的类型为 String。")]),a._v(" "),t("p",[a._v("当然我们也可以直接显示的声明字符串为 String 类型，如下实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   val greeting: String = "Hello, World!"\n\n   def main(args: Array[String]) {\n      println( greeting )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])])]),a._v(" "),t("blockquote",[t("p",[a._v("我们前面提到过 String 对象是不可变的，如果你需要创建一个可以修改的字符串，可以使用 String Builder 类，如下实例:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val buf = new StringBuilder;\n      buf += \'a\'\n      buf ++= "bcdef"\n      println( "buf is : " + buf.toString );\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"字符串长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串长度"}},[a._v("#")]),a._v(" 字符串长度")]),a._v(" "),t("blockquote",[t("p",[a._v("我们可以使用 length() 方法来获取字符串长度：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      var palindrome = "www.runoob.com";\n      var len = palindrome.length();\n      println( "String Length is : " + len );\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"字符串连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串连接"}},[a._v("#")]),a._v(" 字符串连接")]),a._v(" "),t("blockquote",[t("p",[a._v("String 类中使用 concat() 方法来连接两个字符串：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("string1.concat(string2);\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("blockquote",[t("p",[a._v("同样你也可以使用加号(+)来连接：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('scala> "weekdawn " + " yoyo"\nres1: String = weekdawn yoyo\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"创建格式化字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建格式化字符串"}},[a._v("#")]),a._v(" 创建格式化字符串")]),a._v(" "),t("blockquote",[t("p",[a._v("String 类中你可以使用 printf() 方法来格式化字符串并输出，String format() 方法可以返回 String 对象而不是 PrintStream 对象。以下实例演示了 printf() 方法的使用：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      var floatVar = 12.456\n      var intVar = 2000\n      var stringVar = "菜鸟教程!"\n      var fs = printf("浮点型变量为 " +\n                   "%f, 整型变量为 %d, 字符串为 " +\n                   " %s", floatVar, intVar, stringVar)\n      println(fs)\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"string方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string方法"}},[a._v("#")]),a._v(" String方法")]),a._v(" "),t("blockquote",[t("p",[a._v("下表列出了 java.lang.String 中常用的方法，可以在 Scala 中使用：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("序号")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("方法及描述")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("1")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**char charAt(int index)**返回指定位置的字符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("2")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int compareTo(Object o)**比较字符串与对象")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("3")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int compareTo(String anotherString)**按字典顺序比较两个字符串")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("4")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int compareToIgnoreCase(String str)**按字典顺序比较两个字符串，不考虑大小写")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("5")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String concat(String str)**将指定字符串连接到此字符串的结尾")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("6")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean contentEquals(StringBuffer sb)**将此字符串与指定的 StringBuffer 比较。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("7")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**static String copyValueOf(char[] data)**返回指定数组中表示该字符序列的 String")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("8")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**static String copyValueOf(char[] data, int offset, int count)**返回指定数组中表示该字符序列的 String")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("9")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean endsWith(String suffix)**测试此字符串是否以指定的后缀结束")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("10")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean equals(Object anObject)**将此字符串与指定的对象比较")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("11")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean equalsIgnoreCase(String anotherString)**将此 String 与另一个 String 比较，不考虑大小写")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("12")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**byte getBytes()**使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("13")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[t("strong",[a._v("byte[] getBytes(String charsetName")]),a._v("使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("14")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)**将字符从此字符串复制到目标字符数组")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("15")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int hashCode()**返回此字符串的哈希码")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("16")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int indexOf(int ch)**返回指定字符在此字符串中第一次出现处的索引")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("17")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int indexOf(int ch, int fromIndex)**返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("18")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int indexOf(String str)**返回指定子字符串在此字符串中第一次出现处的索引")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("19")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int indexOf(String str, int fromIndex)**返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("20")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String intern()**返回字符串对象的规范化表示形式")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("21")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int lastIndexOf(int ch)**返回指定字符在此字符串中最后一次出现处的索引")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("22")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int lastIndexOf(int ch, int fromIndex)**返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("23")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int lastIndexOf(String str)**返回指定子字符串在此字符串中最右边出现处的索引")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("24")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int lastIndexOf(String str, int fromIndex)**返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("25")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**int length()**返回此字符串的长度")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("26")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean matches(String regex)**告知此字符串是否匹配给定的正则表达式")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("27")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)**测试两个字符串区域是否相等")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("28")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean regionMatches(int toffset, String other, int ooffset, int len)**测试两个字符串区域是否相等")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("29")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String replace(char oldChar, char newChar)**返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("30")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[t("strong",[a._v("String replaceAll(String regex, String replacement")]),a._v("使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("31")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String replaceFirst(String regex, String replacement)**使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("32")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String[] split(String regex)**根据给定正则表达式的匹配拆分此字符串")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("33")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String[] split(String regex, int limit)**根据匹配给定的正则表达式来拆分此字符串")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("34")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean startsWith(String prefix)**测试此字符串是否以指定的前缀开始")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("35")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**boolean startsWith(String prefix, int toffset)**测试此字符串从指定索引开始的子字符串是否以指定前缀开始。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("36")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**CharSequence subSequence(int beginIndex, int endIndex)**返回一个新的字符序列，它是此序列的一个子序列")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("37")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String substring(int beginIndex)**返回一个新的字符串，它是此字符串的一个子字符串")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("38")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String substring(int beginIndex, int endIndex)**返回一个新字符串，它是此字符串的一个子字符串")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("39")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**char[] toCharArray()**将此字符串转换为一个新的字符数组")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("40")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String toLowerCase()**使用默认语言环境的规则将此 String 中的所有字符都转换为小写")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("41")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String toLowerCase(Locale locale)**使用给定 Locale 的规则将此 String 中的所有字符都转换为小写")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("42")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String toString()**返回此对象本身（它已经是一个字符串！）")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("43")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String toUpperCase()**使用默认语言环境的规则将此 String 中的所有字符都转换为大写")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("44")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String toUpperCase(Locale locale)**使用给定 Locale 的规则将此 String 中的所有字符都转换为大写")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("45")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**String trim()**删除指定字符串的首尾空白符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("46")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**static String valueOf(primitive data type x)**返回指定类型参数的字符串表示形式")])])])])]),a._v(" "),t("h3",{attrs:{id:"scala数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala数组"}},[a._v("#")]),a._v(" Scala数组")]),a._v(" "),t("h4",{attrs:{id:"声明数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#声明数组"}},[a._v("#")]),a._v(" 声明数组")]),a._v(" "),t("blockquote",[t("p",[a._v("以下是 Scala 数组声明的语法格式：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var z:Array[String] = new Array[String](3)\n\n或\n\nvar z = new Array[String](3)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"处理数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理数组"}},[a._v("#")]),a._v(" 处理数组")]),a._v(" "),t("blockquote",[t("p",[a._v("数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本的 for 循环。")]),a._v(" "),t("p",[a._v("以下实例演示了数组的创建，初始化等处理过程：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      var myList = Array(1.9, 2.9, 3.4, 3.5)\n      \n      // 输出所有数组元素\n      for ( x <- myList ) {\n         println( x )\n      }\n\n      // 计算数组所有元素的总和\n      var total = 0.0;\n      for ( i <- 0 to (myList.length - 1)) {\n         total += myList(i);\n      }\n      println("总和为 " + total);\n\n      // 查找数组中的最大元素\n      var max = myList(0);\n      for ( i <- 1 to (myList.length - 1) ) {\n         if (myList(i) > max) max = myList(i);\n      }\n      println("最大值为 " + max);\n    \n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"多维数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[a._v("#")]),a._v(" 多维数组")]),a._v(" "),t("blockquote",[t("p",[a._v("多维数组一个数组中的值可以是另一个数组，另一个数组的值也可以是一个数组。矩阵与表格是我们常见的二维数组。")]),a._v(" "),t("p",[a._v("以上是一个定义了二维数组的实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var myMatrix = ofDim[Int](3,3)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("实例中数组中包含三个数组元素，每个数组元素又含有三个值。")]),a._v(" "),t("p",[a._v("接下来我们来看一个二维数组处理的完整实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import Array._\n\nobject Test {\n   def main(args: Array[String]) {\n      var myMatrix = ofDim[Int](3,3)\n      \n      // 创建矩阵\n      for (i <- 0 to 2) {\n         for ( j <- 0 to 2) {\n            myMatrix(i)(j) = j;\n         }\n      }\n      \n      // 打印二维阵列\n      for (i <- 0 to 2) {\n         for ( j <- 0 to 2) {\n            print(" " + myMatrix(i)(j));\n         }\n         println();\n      }\n    \n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"合并数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并数组"}},[a._v("#")]),a._v(" 合并数组")]),a._v(" "),t("blockquote",[t("p",[a._v("以下实例中，我们使用 concat() 方法来合并两个数组，concat() 方法中接受多个数组参数：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import Array._\n\nobject Test {\n   def main(args: Array[String]) {\n      var myList1 = Array(1.9, 2.9, 3.4, 3.5)\n      var myList2 = Array(8.9, 7.9, 0.4, 1.5)\n\n      var myList3 =  concat( myList1, myList2)\n      \n      // 输出所有数组元素\n      for ( x <- myList3 ) {\n         println( x )\n      }\n   }\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"创建区间数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建区间数组"}},[a._v("#")]),a._v(" 创建区间数组")]),a._v(" "),t("blockquote",[t("p",[a._v("以下实例中，我们使用了 range() 方法来生成一个区间范围内的数组。"),t("strong",[a._v("range")]),a._v("() 方法最后一个参数为步长，默认为 1：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import Array._\n\nobject Test {\n   def main(args: Array[String]) {\n      var myList1 = range(10, 20, 2)\n      var myList2 = range(10,20)\n\n      // 输出所有数组元素\n      for ( x <- myList1 ) {\n         print( " " + x )\n      }\n      println()\n      for ( x <- myList2 ) {\n         print( " " + x )\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"scala数组方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala数组方法"}},[a._v("#")]),a._v(" Scala数组方法")]),a._v(" "),t("blockquote",[t("p",[a._v("下表中为 Scala 语言中处理数组的重要方法，使用它前我们需要使用 "),t("strong",[a._v("import Array._")]),a._v(" 引入包。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("序号")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("方法和描述")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("1")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def apply( x: T, xs: T* ): Array[T]**创建指定对象 T 的数组, T 的值可以是 Unit, Double, Float, Long, Int, Char, Short, Byte, Boolean。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("2")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def concat[T]( xss: Array[T]* ): Array[T]**合并数组")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("3")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[t("strong",[a._v("def copy( src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int ): Unit")]),a._v("复制一个数组到另一个数组上。相等于 Java's System.arraycopy(src, srcPos, dest, destPos, length)。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("4")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def empty[T]: Array[T]**返回长度为 0 的数组")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("5")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[t("strong",[a._v("def iterate[T]( start: T, len: Int )( f: (T) => T ): Array[T]"),t("strong",[a._v("返回指定长度数组，每个数组元素为指定函数的返回值。以上实例数组初始值为 0，长度为 3，计算函数为")]),a._v("a=>a+1")]),a._v("："),t("code",[a._v("scala> Array.iterate(0,3)(a=>a+1) res1: Array[Int] = Array(0, 1, 2)")])])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("6")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def fill[T]( n: Int )(elem: => T): Array[T]**返回数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("7")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def fill[T]( n1: Int, n2: Int )( elem: => T ): Array[Array[T]]**返回二数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("8")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def ofDim[T]( n1: Int ): Array[T]**创建指定长度的数组")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("9")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def ofDim[T]( n1: Int, n2: Int ): Array[Array[T]]**创建二维数组")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("10")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def ofDim[T]( n1: Int, n2: Int, n3: Int ): Array[Array[Array[T]]]**创建三维数组")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("11")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def range( start: Int, end: Int, step: Int ): Array[Int]**创建指定区间内的数组，step 为每个元素间的步长")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("12")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def range( start: Int, end: Int ): Array[Int]**创建指定区间内的数组")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("13")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def tabulate[T]( n: Int )(f: (Int)=> T): Array[T]**返回指定长度数组，每个数组元素为指定函数的返回值，默认从 0 开始。以上实例返回 3 个元素："),t("code",[a._v("scala> Array.tabulate(3)(a => a + 5) res0: Array[Int] = Array(5, 6, 7)")])])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("14")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("**def tabulate[T]( n1: Int, n2: Int )( f: (Int, Int ) => T): Array[Array[T]]**返回指定长度的二维数组，每个数组元素为指定函数的返回值，默认从 0 开始。")])])])])]),a._v(" "),t("h3",{attrs:{id:"scala集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala集合"}},[a._v("#")]),a._v(" Scala集合")]),a._v(" "),t("h4",{attrs:{id:"scala-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-list"}},[a._v("#")]),a._v(" Scala List")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 列表类似于数组，它们所有元素的类型都相同，但是它们也有所不同：列表是不可变的，值一旦被定义了就不能改变，其次列表 具有递归的结构（也就是链接表结构）而数组不是。。")]),a._v(" "),t("p",[a._v("列表的元素类型 T 可以写成 List[T]。例如，以下列出了多种类型的列表：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 字符串列表\nval site: List[String] = List("Runoob", "Google", "Baidu")\n\n// 整型列表\nval nums: List[Int] = List(1, 2, 3, 4)\n\n// 空列表\nval empty: List[Nothing] = List()\n\n// 二维列表\nval dim: List[List[Int]] =\n   List(\n      List(1, 0, 0),\n      List(0, 1, 0),\n      List(0, 0, 1)\n   )\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("p",[a._v("构造列表的两个基本单位是 "),t("strong",[a._v("Nil")]),a._v(" 和 "),t("strong",[a._v("::")])]),a._v(" "),t("p",[t("strong",[a._v("Nil")]),a._v(" 也可以表示为一个空列表。")]),a._v(" "),t("p",[a._v("以上实例我们可以写成如下所示：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 字符串列表\nval site = "Runoob" :: ("Google" :: ("Baidu" :: Nil))\n\n// 整型列表\nval nums = 1 :: (2 :: (3 :: (4 :: Nil)))\n\n// 空列表\nval empty = Nil\n\n// 二维列表\nval dim = (1 :: (0 :: (0 :: Nil))) ::\n          (0 :: (1 :: (0 :: Nil))) ::\n          (0 :: (0 :: (1 :: Nil))) :: Nil\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"列表基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表基本操作"}},[a._v("#")]),a._v(" 列表基本操作")]),a._v(" "),t("p",[a._v("Scala列表有三个基本操作：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("head")]),a._v(" 返回列表第一个元素")]),a._v(" "),t("li",[t("code",[a._v("tail")]),a._v(" 返回一个列表，包含除了第一元素之外的其他元素")]),a._v(" "),t("li",[t("code",[a._v("isEmpty")]),a._v(" 在列表为空时返回true")])]),a._v(" "),t("p",[a._v("对于Scala列表的任何操作都可以使用这三个基本操作来表达。实例如下:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val site = "Runoob" :: ("Google" :: ("Baidu" :: Nil))\n      val nums = Nil\n\n      println( "第一网站是 : " + site.head )\n      println( "最后一个网站是 : " + site.tail )\n      println( "查看列表 site 是否为空 : " + site.isEmpty )\n      println( "查看 nums 是否为空 : " + nums.isEmpty )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ vim Test.scala \n$ scala Test.scala \n第一网站是 : Runoob\n最后一个网站是 : List(Google, Baidu)\n查看列表 site 是否为空 : false\n查看 nums 是否为空 : true\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"连接列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接列表"}},[a._v("#")]),a._v(" 连接列表")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v(":::")]),a._v(" 运算符或 "),t("strong",[a._v("List.::😦)")]),a._v(" 方法或 "),t("strong",[a._v("List.concat()")]),a._v(" 方法来连接两个或多个列表。实例如下:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val site1 = "Runoob" :: ("Google" :: ("Baidu" :: Nil))\n      val site2 = "Facebook" :: ("Taobao" :: Nil)\n\n      // 使用 ::: 运算符\n      var fruit = site1 ::: site2\n      println( "site1 ::: site2 : " + fruit )\n      \n      // 使用 List.:::() 方法\n      fruit = site1.:::(site2)\n      println( "site1.:::(site2) : " + fruit )\n\n      // 使用 concat 方法\n      fruit = List.concat(site1, site2)\n      println( "List.concat(site1, site2) : " + fruit  )\n      \n\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ vim Test.scala \n$ scala Test.scala \nsite1 ::: site2 : List(Runoob, Google, Baidu, Facebook, Taobao)\nsite1.:::(site2) : List(Facebook, Taobao, Runoob, Google, Baidu)\nList.concat(site1, site2) : List(Runoob, Google, Baidu, Facebook, Taobao)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"list-fill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-fill"}},[a._v("#")]),a._v(" List.fill()")]),a._v(" "),t("p",[a._v("我们可以使用 List.fill() 方法来创建一个指定重复数量的元素列表：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val site = List.fill(3)("Runoob") // 重复 Runoob 3次\n      println( "site : " + site  )\n\n      val num = List.fill(10)(2)         // 重复元素 2, 10 次\n      println( "num : " + num  )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ vim Test.scala \n$ scala Test.scala \nsite : List(Runoob, Runoob, Runoob)\nnum : List(2, 2, 2, 2, 2, 2, 2, 2, 2, 2)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"list-tabulate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-tabulate"}},[a._v("#")]),a._v(" List.tabulate()")]),a._v(" "),t("p",[a._v("List.tabulate() 方法是通过给定的函数来创建列表。")]),a._v(" "),t("p",[a._v("方法的第一个参数为元素的数量，可以是二维的，第二个参数为指定的函数，我们通过指定的函数计算结果并返回值插入到列表中，起始值为 0，实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      // 通过给定的函数创建 5 个元素\n      val squares = List.tabulate(6)(n => n * n)\n      println( "一维 : " + squares  )\n\n      // 创建二维列表\n      val mul = List.tabulate( 4,5 )( _ * _ )      \n      println( "多维 : " + mul  )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ vim Test.scala \n$ scala Test.scala \n一维 : List(0, 1, 4, 9, 16, 25)\n多维 : List(List(0, 0, 0, 0, 0), List(0, 1, 2, 3, 4), List(0, 2, 4, 6, 8), List(0, 3, 6, 9, 12))\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"list-reverse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-reverse"}},[a._v("#")]),a._v(" List.reverse")]),a._v(" "),t("p",[a._v("List.reverse 用于将列表的顺序反转，实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val site = "Runoob" :: ("Google" :: ("Baidu" :: Nil))\n      println( "site 反转前 : " + site )\n\n      println( "site 反转后 : " + site.reverse )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ vim Test.scala \n$ scala Test.scala \nsite 反转前 : List(Runoob, Google, Baidu)\nsite 反转后 : List(Baidu, Google, Runoob)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-set"}},[a._v("#")]),a._v(" Scala Set")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala Set(集合)是没有重复的对象集合，所有的元素都是唯一的。")]),a._v(" "),t("p",[a._v("Scala 集合分为可变的和不可变的集合。")]),a._v(" "),t("p",[a._v("默认情况下，Scala 使用的是不可变集合，如果你想使用可变集合，需要引用 "),t("strong",[a._v("scala.collection.mutable.Set")]),a._v(" 包。")]),a._v(" "),t("p",[a._v("默认引用 scala.collection.immutable.Set，不可变集合实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("val set = Set(1,2,3)\nprintln(set.getClass.getName) // \n\nprintln(set.exists(_ % 2 == 0)) //true\nprintln(set.drop(1)) //Set(2,3)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("如果需要使用可变集合需要引入 scala.collection.mutable.Set：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import scala.collection.mutable.Set // 可以在任何地方引入 可变集合\n\nval mutableSet = Set(1,2,3)\nprintln(mutableSet.getClass.getName) // scala.collection.mutable.HashSet\n\nmutableSet.add(4)\nmutableSet.remove(1)\nmutableSet += 5\nmutableSet -= 2\n\nprintln(mutableSet) // Set(5, 3, 4)\n\nval another = mutableSet.toSet\nprintln(another.getClass.getName) // scala.collection.immutable.Set\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("blockquote",[t("p",[t("strong",[a._v("注意：")]),a._v(" 虽然可变Set和不可变Set都有添加或删除元素的操作，但是有一个非常大的差别。对不可变Set进行操作，会产生一个新的set，原来的set并没有改变，这与List一样。 而对可变Set进行操作，改变的是该Set本身，与ListBuffer类似。")])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"集合基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合基本操作"}},[a._v("#")]),a._v(" 集合基本操作")]),a._v(" "),t("p",[a._v("Scala集合有三个基本操作：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("head")]),a._v(" 返回集合第一个元素")]),a._v(" "),t("li",[t("code",[a._v("tail")]),a._v(" 返回一个集合，包含除了第一元素之外的其他元素")]),a._v(" "),t("li",[t("code",[a._v("isEmpty")]),a._v(" 在集合为空时返回true")])]),a._v(" "),t("p",[a._v("对于Scala集合的任何操作都可以使用这三个基本操作来表达。实例如下:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val site = Set("Runoob", "Google", "Baidu")\n      val nums: Set[Int] = Set()\n\n      println( "第一网站是 : " + site.head )\n      println( "最后一个网站是 : " + site.tail )\n      println( "查看列表 site 是否为空 : " + site.isEmpty )\n      println( "查看 nums 是否为空 : " + nums.isEmpty )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ vim Test.scala \n$ scala Test.scala \n第一网站是 : Runoob\n最后一个网站是 : Set(Google, Baidu)\n查看列表 site 是否为空 : false\n查看 nums 是否为空 : true\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"连接集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接集合"}},[a._v("#")]),a._v(" 连接集合")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("++")]),a._v(" 运算符或 "),t("strong",[a._v("Set.++()")]),a._v(" 方法来连接两个集合。如果元素有重复的就会移除重复的元素。实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val site1 = Set("Runoob", "Google", "Baidu")\n      val site2 = Set("Faceboook", "Taobao")\n\n      // ++ 作为运算符使用\n      var site = site1 ++ site2\n      println( "site1 ++ site2 : " + site )\n\n      //  ++ 作为方法使用\n      site = site1.++(site2)\n      println( "site1.++(site2) : " + site )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ vim Test.scala \n$ scala Test.scala \nsite1 ++ site2 : Set(Faceboook, Taobao, Google, Baidu, Runoob)\nsite1.++(site2) : Set(Faceboook, Taobao, Google, Baidu, Runoob)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"查找集合中最大与最小元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找集合中最大与最小元素"}},[a._v("#")]),a._v(" 查找集合中最大与最小元素")]),a._v(" "),t("p",[a._v("你可以使用 Set.min 方法来查找集合中的最小元素，使用 Set.max 方法查找集合中的最大元素。实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val num = Set(5,6,9,20,30,45)\n\n      // 查找集合中最大与最小元素\n      println( "Set(5,6,9,20,30,45) 集合中的最小元素是 : " + num.min )\n      println( "Set(5,6,9,20,30,45) 集合中的最大元素是 : " + num.max )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("h4",{attrs:{id:"交集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交集"}},[a._v("#")]),a._v(" 交集")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("Set.&")]),a._v(" 方法或 "),t("strong",[a._v("Set.intersect")]),a._v(" 方法来查看两个集合的交集元素。实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val num1 = Set(5,6,9,20,30,45)\n      val num2 = Set(50,60,9,20,35,55)\n\n      // 交集\n      println( "num1.&(num2) : " + num1.&(num2) )\n      println( "num1.intersect(num2) : " + num1.intersect(num2) )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ vim Test.scala \n$ scala Test.scala \nnum1.&(num2) : Set(20, 9)\nnum1.intersect(num2) : Set(20, 9)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-map"}},[a._v("#")]),a._v(" Scala Map")]),a._v(" "),t("blockquote",[t("p",[a._v("Map(映射)是一种可迭代的键值对（key/value）结构。")]),a._v(" "),t("p",[a._v("所有的值都可以通过键来获取。")]),a._v(" "),t("p",[a._v("Map 中的键都是唯一的。")]),a._v(" "),t("p",[a._v("Map 也叫哈希表（Hash tables）。")]),a._v(" "),t("p",[a._v("Map 有两种类型，可变与不可变，区别在于可变对象可以修改它，而不可变对象不可以。")]),a._v(" "),t("p",[a._v("默认情况下 Scala 使用不可变 Map。如果你需要使用可变集合，你需要显式的引入 "),t("strong",[a._v("import scala.collection.mutable.Map")]),a._v(" 类")]),a._v(" "),t("p",[a._v("在 Scala 中 你可以同时使用可变与不可变 Map，不可变的直接使用 Map，可变的使用 mutable.Map。以下实例演示了不可变 Map 的应用：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 空哈希表，键为字符串，值为整型\nvar A:Map[Char,Int] = Map()\n\n// Map 键值对演示\nval colors = Map("red" -> "#FF0000", "azure" -> "#F0FFFF")\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("定义 Map 时，需要为键值对定义类型。如果需要添加 key-value 对，可以使用 + 号，如下所示：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("A += ('I' -> 1)\nA += ('J' -> 5)\nA += ('K' -> 10)\nA += ('L' -> 100)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"map-基本操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-基本操作"}},[a._v("#")]),a._v(" Map 基本操作")]),a._v(" "),t("p",[a._v("Scala Map 有三个基本操作：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("方法")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("描述")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("keys")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("返回 Map 所有的键(key)")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("values")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("返回 Map 所有的值(value)")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("isEmpty")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("在 Map 为空时返回true")])])])]),a._v(" "),t("h4",{attrs:{id:"实例-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-5"}},[a._v("#")]),a._v(" 实例")]),a._v(" "),t("p",[a._v("以下实例演示了以上三个方法的基本应用：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val colors = Map("red" -> "#FF0000",\n                       "azure" -> "#F0FFFF",\n                       "peru" -> "#CD853F")\n\n      val nums: Map[Int, Int] = Map()\n\n      println( "colors 中的键为 : " + colors.keys )\n      println( "colors 中的值为 : " + colors.values )\n      println( "检测 colors 是否为空 : " + colors.isEmpty )\n      println( "检测 nums 是否为空 : " + nums.isEmpty )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\ncolors 中的键为 : Set(red, azure, peru)\ncolors 中的值为 : MapLike(#FF0000, #F0FFFF, #CD853F)\n检测 colors 是否为空 : false\n检测 nums 是否为空 : true\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"map-合并"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-合并"}},[a._v("#")]),a._v(" Map 合并")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("++")]),a._v(" 运算符或 "),t("strong",[a._v("Map.++()")]),a._v(" 方法来连接两个 Map，Map 合并时会移除重复的 key。以下演示了两个 Map 合并的实例:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val colors1 = Map("red" -> "#FF0000",\n                        "azure" -> "#F0FFFF",\n                        "peru" -> "#CD853F")\n      val colors2 = Map("blue" -> "#0033FF",\n                        "yellow" -> "#FFFF00",\n                        "red" -> "#FF0000")\n\n      //  ++ 作为运算符\n      var colors = colors1 ++ colors2\n      println( "colors1 ++ colors2 : " + colors )\n\n      //  ++ 作为方法\n      colors = colors1.++(colors2)\n      println( "colors1.++(colors2) : " + colors )\n\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\ncolors1 ++ colors2 : Map(blue -> #0033FF, azure -> #F0FFFF, peru -> #CD853F, yellow -> #FFFF00, red -> #FF0000)\ncolors1.++(colors2) : Map(blue -> #0033FF, azure -> #F0FFFF, peru -> #CD853F, yellow -> #FFFF00, red -> #FF0000)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"输出-map-的-keys-和-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出-map-的-keys-和-values"}},[a._v("#")]),a._v(" 输出 Map 的 keys 和 values")]),a._v(" "),t("p",[a._v("以下通过 foreach 循环输出 Map 中的 keys 和 values：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val sites = Map("runoob" -> "http://www.runoob.com",\n                       "baidu" -> "http://www.baidu.com",\n                       "taobao" -> "http://www.taobao.com")\n\n      sites.keys.foreach{ i =>  \n                           print( "Key = " + i )\n                           println(" Value = " + sites(i) )}\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nKey = runoob Value = http://www.runoob.com\nKey = baidu Value = http://www.baidu.com\nKey = taobao Value = http://www.taobao.com\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"查看-map-中是否存在指定的-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看-map-中是否存在指定的-key"}},[a._v("#")]),a._v(" 查看 Map 中是否存在指定的 Key")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("Map.contains")]),a._v(" 方法来查看 Map 中是否存在指定的 Key。实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val sites = Map("runoob" -> "http://www.runoob.com",\n                       "baidu" -> "http://www.baidu.com",\n                       "taobao" -> "http://www.taobao.com")\n\n      if( sites.contains( "runoob" )){\n           println("runoob 键存在，对应的值为 :"  + sites("runoob"))\n      }else{\n           println("runoob 键不存在")\n      }\n      if( sites.contains( "baidu" )){\n           println("baidu 键存在，对应的值为 :"  + sites("baidu"))\n      }else{\n           println("baidu 键不存在")\n      }\n      if( sites.contains( "google" )){\n           println("google 键存在，对应的值为 :"  + sites("google"))\n      }else{\n           println("google 键不存在")\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nrunoob 键存在，对应的值为 :http://www.runoob.com\nbaidu 键存在，对应的值为 :http://www.baidu.com\ngoogle 键不存在\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"scala-元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-元组"}},[a._v("#")]),a._v(" Scala 元组")]),a._v(" "),t("blockquote",[t("p",[a._v("与列表一样，元组也是不可变的，但与列表不同的是元组可以包含不同类型的元素。")]),a._v(" "),t("p",[a._v("元组的值是通过将单个的值包含在圆括号中构成的。例如：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('val t = (1, 3.14, "Fred")  \n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("以上实例在元组中定义了三个元素，对应的类型分别为[Int, Double, java.lang.String]。")]),a._v(" "),t("p",[a._v("此外我们也可以使用以下方式来定义：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('val t = new Tuple3(1, 3.14, "Fred")\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v('元组的实际类型取决于它的元素的类型，比如 (99, "runoob") 是 Tuple2[Int, String]。 (\'u\', \'r\', "the", 1, 4, "me") 为 Tuple6[Char, Char, String, Int, Int, String]。')]),a._v(" "),t("p",[a._v("目前 Scala 支持的元组最大长度为 22。对于更大长度你可以使用集合，或者扩展元组。")]),a._v(" "),t("p",[a._v("访问元组的元素可以通过数字索引，如下一个元组：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("val t = (4,3,2,1)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("我们可以使用 t._1 访问第一个元素， t._2 访问第二个元素，如下所示：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val t = (4,3,2,1)\n\n      val sum = t._1 + t._2 + t._3 + t._4\n\n      println( "元素之和为: "  + sum )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n元素之和为: 10\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"迭代元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迭代元组"}},[a._v("#")]),a._v(" 迭代元组")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("Tuple.productIterator()")]),a._v(" 方法来迭代输出元组的所有元素：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val t = (4,3,2,1)\n      \n      t.productIterator.foreach{ i =>println("Value = " + i )}\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nValue = 4\nValue = 3\nValue = 2\nValue = 1\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"元组转为字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组转为字符串"}},[a._v("#")]),a._v(" 元组转为字符串")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("Tuple.toString()")]),a._v(" 方法将元组的所有元素组合成一个字符串，实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val t = new Tuple3(1, "hello", Console)\n      \n      println("连接后的字符串为: " + t.toString() )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n连接后的字符串为: (1,hello,scala.Console$@4dd8dc3)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"元素交换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元素交换"}},[a._v("#")]),a._v(" 元素交换")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("Tuple.swap")]),a._v(" 方法来交换元组的元素。如下实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val t = new Tuple2("www.google.com", "www.runoob.com")\n      \n      println("交换后的元组: " + t.swap )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n交换后的元组: (www.runoob.com,www.google.com)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala-option"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-option"}},[a._v("#")]),a._v(" Scala Option")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala Option(选项)类型用来表示一个值是可选的（有值或无值)。")]),a._v(" "),t("p",[a._v("Option[T] 是一个类型为 T 的可选值的容器： 如果值存在， Option[T] 就是一个 Some[T] ，如果不存在， Option[T] 就是对象 None 。")]),a._v(" "),t("p",[a._v("接下来我们来看一段代码：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 虽然 Scala 可以不定义变量的类型，不过为了清楚些，我还是\n// 把他显示的定义上了\n \nval myMap: Map[String, String] = Map("key1" -> "value")\nval value1: Option[String] = myMap.get("key1")\nval value2: Option[String] = myMap.get("key2")\n \nprintln(value1) // Some("value1")\nprintln(value2) // None\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("在上面的代码中，myMap 一个是一个 Key 的类型是 String，Value 的类型是 String 的 hash map，但不一样的是他的 get() 返回的是一个叫 Option[String] 的类别。")]),a._v(" "),t("p",[a._v("Scala 使用 Option[String] 来告诉你：「我会想办法回传一个 String，但也可能没有 String 给你」。")]),a._v(" "),t("p",[a._v("myMap 里并没有 key2 这笔数据，get() 方法返回 None。")]),a._v(" "),t("p",[a._v("Option 有两个子类别，一个是 Some，一个是 None，当他回传 Some 的时候，代表这个函式成功地给了你一个 String，而你可以透过 get() 这个函式拿到那个 String，如果他返回的是 None，则代表没有字符串可以给你。")]),a._v(" "),t("p",[a._v("另一个实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val sites = Map("runoob" -> "www.runoob.com", "google" -> "www.google.com")\n      \n      println("sites.get( \\"runoob\\" ) : " +  sites.get( "runoob" )) // Some(www.runoob.com)\n      println("sites.get( \\"baidu\\" ) : " +  sites.get( "baidu" ))  //  None\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('$ scalac Test.scala \n$ scala Test\nsites.get( "runoob" ) : Some(www.runoob.com)\nsites.get( "baidu" ) : None\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("你也可以通过模式匹配来输出匹配值。实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val sites = Map("runoob" -> "www.runoob.com", "google" -> "www.google.com")\n      \n      println("show(sites.get( \\"runoob\\")) : " +  \n                                          show(sites.get( "runoob")) )\n      println("show(sites.get( \\"baidu\\")) : " +  \n                                          show(sites.get( "baidu")) )\n   }\n   \n   def show(x: Option[String]) = x match {\n      case Some(s) => s\n      case None => "?"\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('$ scalac Test.scala \n$ scala Test\nshow(sites.get( "runoob")) : www.runoob.com\nshow(sites.get( "baidu")) : ?\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"getorelse-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getorelse-方法"}},[a._v("#")]),a._v(" getOrElse() 方法")]),a._v(" "),t("p",[a._v("你可以使用 getOrElse() 方法来获取元组中存在的元素或者使用其默认的值，实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val a:Option[Int] = Some(5)\n      val b:Option[Int] = None \n      \n      println("a.getOrElse(0): " + a.getOrElse(0) )\n      println("b.getOrElse(10): " + b.getOrElse(10) )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\na.getOrElse(0): 5\nb.getOrElse(10): 10\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"isempty-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#isempty-方法"}},[a._v("#")]),a._v(" isEmpty() 方法")]),a._v(" "),t("p",[a._v("你可以使用 isEmpty() 方法来检测元组中的元素是否为 None，实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val a:Option[Int] = Some(5)\n      val b:Option[Int] = None \n      \n      println("a.isEmpty: " + a.isEmpty )\n      println("b.isEmpty: " + b.isEmpty )\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\na.isEmpty: false\nb.isEmpty: true\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala-iterator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-iterator"}},[a._v("#")]),a._v(" Scala Iterator")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法。")]),a._v(" "),t("p",[a._v("迭代器 it 的两个基本操作是 "),t("strong",[a._v("next")]),a._v(" 和 "),t("strong",[a._v("hasNext")]),a._v("。")]),a._v(" "),t("p",[a._v("调用 "),t("strong",[a._v("it.next()")]),a._v(" 会返回迭代器的下一个元素，并且更新迭代器的状态。")]),a._v(" "),t("p",[a._v("调用 "),t("strong",[a._v("it.hasNext()")]),a._v(" 用于检测集合中是否还有元素。")]),a._v(" "),t("p",[a._v("让迭代器 it 逐个返回所有元素最简单的方法是使用 while 循环：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val it = Iterator("Baidu", "Google", "Runoob", "Taobao")\n      \n      while (it.hasNext){\n         println(it.next())\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nBaidu\nGoogle\nRunoob\nTaobao\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"查找最大与最小元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找最大与最小元素"}},[a._v("#")]),a._v(" 查找最大与最小元素")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("it.min")]),a._v(" 和 "),t("strong",[a._v("it.max")]),a._v(" 方法从迭代器中查找最大与最小元素，实例如下:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val ita = Iterator(20,40,2,50,69, 90)\n      val itb = Iterator(20,40,2,50,69, 90)\n      \n      println("最大元素是：" + ita.max )\n      println("最小元素是：" + itb.min )\n\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n最大元素是：90\n最小元素是：2\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"获取迭代器的长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取迭代器的长度"}},[a._v("#")]),a._v(" 获取迭代器的长度")]),a._v(" "),t("p",[a._v("你可以使用 "),t("strong",[a._v("it.size")]),a._v(" 或 "),t("strong",[a._v("it.length")]),a._v(" 方法来查看迭代器中的元素个数。实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val ita = Iterator(20,40,2,50,69, 90)\n      val itb = Iterator(20,40,2,50,69, 90)\n      \n      println("ita.size 的值: " + ita.size )\n      println("itb.length 的值: " + itb.length )\n\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nita.size 的值: 6\nitb.length 的值: 6\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])]),a._v(" "),t("h4",{attrs:{id:"集合实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合实例"}},[a._v("#")]),a._v(" 集合实例")]),a._v(" "),t("p",[a._v("以下代码判断，演示了所有以上集合类型的定义实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 定义整型 List\nval x = List(1,2,3,4)\n\n// 定义 Set\nval x = Set(1,3,5,7)\n\n// 定义 Map\nval x = Map("one" -> 1, "two" -> 2, "three" -> 3)\n\n// 创建两个不同类型元素的元组\nval x = (10, "Runoob")\n\n// 定义 Option\nval x:Option[Int] = Some(5)\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("h3",{attrs:{id:"scala类和对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala类和对象"}},[a._v("#")]),a._v(" Scala类和对象")]),a._v(" "),t("blockquote",[t("p",[a._v("类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。类是用于创建对象的蓝图，它是一个定义包括在特定类型的对象中的方法和变量的软件模板。")]),a._v(" "),t("p",[a._v("我们可以使用 new 关键字来创建类的对象，实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('class Point(xc: Int, yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n      println ("x 的坐标点: " + x);\n      println ("y 的坐标点: " + y);\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("Scala中的类不声明为public，一个Scala源文件中可以有多个类。")]),a._v(" "),t("p",[a._v("以上实例的类定义了两个变量 "),t("strong",[a._v("x")]),a._v(" 和 "),t("strong",[a._v("y")]),a._v(" ，一个方法："),t("strong",[a._v("move")]),a._v("，方法没有返回值。")]),a._v(" "),t("p",[a._v("Scala 的类定义可以有参数，称为类参数，如上面的 xc, yc，类参数在整个类中都可以访问。")]),a._v(" "),t("p",[a._v("接着我们可以使用 new 来实例化类，并访问类中的方法和变量：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import java.io._\n\nclass Point(xc: Int, yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n      println ("x 的坐标点: " + x);\n      println ("y 的坐标点: " + y);\n   }\n}\n\nobject Test {\n   def main(args: Array[String]) {\n      val pt = new Point(10, 20);\n\n      // 移到一个新的位置\n      pt.move(10, 10);\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nx 的坐标点: 20\ny 的坐标点: 30\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"scala-继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-继承"}},[a._v("#")]),a._v(" Scala 继承")]),a._v(" "),t("p",[a._v("Scala继承一个基类跟Java很相似, 但我们需要注意以下几点：")]),a._v(" "),t("ul",[t("li",[a._v("1、重写一个非抽象方法必须使用override修饰符。")]),a._v(" "),t("li",[a._v("2、只有主构造函数才可以往基类的构造函数里写参数。")]),a._v(" "),t("li",[a._v("3、在子类中重写超类的抽象方法时，你不需要使用override关键字。")])]),a._v(" "),t("p",[a._v("接下来让我们来看个实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('class Point(xc: Int, yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n      println ("x 的坐标点: " + x);\n      println ("y 的坐标点: " + y);\n   }\n}\n\nclass Location(override val xc: Int, override val yc: Int,\n   val zc :Int) extends Point(xc, yc){\n   var z: Int = zc\n\n   def move(dx: Int, dy: Int, dz: Int) {\n      x = x + dx\n      y = y + dy\n      z = z + dz\n      println ("x 的坐标点 : " + x);\n      println ("y 的坐标点 : " + y);\n      println ("z 的坐标点 : " + z);\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br")])]),t("p",[a._v("Scala 使用 extends 关键字来继承一个类。实例中 Location 类继承了 Point 类。Point 称为父类(基类)，Location 称为子类。")]),a._v(" "),t("p",[t("strong",[a._v("override val xc")]),a._v(" 为重写了父类的字段。")]),a._v(" "),t("p",[a._v("继承会继承父类的所有属性和方法，Scala 只允许继承一个父类。")]),a._v(" "),t("p",[a._v("实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import java.io._\n\nclass Point(val xc: Int, val yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n      println ("x 的坐标点 : " + x);\n      println ("y 的坐标点 : " + y);\n   }\n}\n\nclass Location(override val xc: Int, override val yc: Int,\n   val zc :Int) extends Point(xc, yc){\n   var z: Int = zc\n\n   def move(dx: Int, dy: Int, dz: Int) {\n      x = x + dx\n      y = y + dy\n      z = z + dz\n      println ("x 的坐标点 : " + x);\n      println ("y 的坐标点 : " + y);\n      println ("z 的坐标点 : " + z);\n   }\n}\n\nobject Test {\n   def main(args: Array[String]) {\n      val loc = new Location(10, 20, 15);\n\n      // 移到一个新的位置\n      loc.move(10, 10, 5);\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nx 的坐标点 : 20\ny 的坐标点 : 30\nz 的坐标点 : 20\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("Scala重写一个非抽象方法，必须用override修饰符。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('class Person {\n  var name = ""\n  override def toString = getClass.getName + "[name=" + name + "]"\n}\n\nclass Employee extends Person {\n  var salary = 0.0\n  override def toString = super.toString + "[salary=" + salary + "]"\n}\n\nobject Test extends App {\n  val fred = new Employee\n  fred.name = "Fred"\n  fred.salary = 50000\n  println(fred)\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nEmployee[name=Fred][salary=50000.0]\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"scala-单例对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-单例对象"}},[a._v("#")]),a._v(" Scala 单例对象")]),a._v(" "),t("p",[a._v("在 Scala 中，是没有 static 这个东西的，但是它也为我们提供了单例模式的实现方法，那就是使用关键字 object。")]),a._v(" "),t("p",[a._v("Scala 中使用单例模式时，除了定义的类之外，还要定义一个同名的 object 对象，它和类的区别是，object对象不能带参数。")]),a._v(" "),t("p",[a._v("当单例对象与某个类共享同一个名称时，他被称作是这个类的伴生对象：companion object。你必须在同一个源文件里定义类和它的伴生对象。类被称为是这个单例对象的伴生类：companion class。类和它的伴生对象可以互相访问其私有成员。")]),a._v(" "),t("h4",{attrs:{id:"单例对象实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例对象实例"}},[a._v("#")]),a._v(" 单例对象实例")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import java.io._\n\nclass Point(val xc: Int, val yc: Int) {\n   var x: Int = xc\n   var y: Int = yc\n   def move(dx: Int, dy: Int) {\n      x = x + dx\n      y = y + dy\n   }\n}\n\nobject Test {\n   def main(args: Array[String]) {\n      val point = new Point(10, 20)\n      printPoint\n\n      def printPoint{\n         println ("x 的坐标点 : " + point.x);\n         println ("y 的坐标点 : " + point.y);\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nx 的坐标点 : 10\ny 的坐标点 : 20\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h4",{attrs:{id:"伴生对象实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#伴生对象实例"}},[a._v("#")]),a._v(" 伴生对象实例")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('/* 文件名：Marker.scala\n */\n\n// 私有构造方法\nclass Marker private(val color:String) {\n\n  println("创建" + this)\n  \n  override def toString(): String = "颜色标记："+ color\n  \n}\n\n// 伴生对象，与类名字相同，可以访问类的私有属性和方法\nobject Marker{\n  \n    private val markers: Map[String, Marker] = Map(\n      "red" -> new Marker("red"),\n      "blue" -> new Marker("blue"),\n      "green" -> new Marker("green")\n    )\n    \n    def apply(color:String) = {\n      if(markers.contains(color)) markers(color) else null\n    }\n  \n    \n    def getMarker(color:String) = { \n      if(markers.contains(color)) markers(color) else null\n    }\n    def main(args: Array[String]) { \n        println(Marker("red"))  \n        // 单例函数调用，省略了.(点)符号  \n        println(Marker getMarker "blue")  \n    }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br"),t("span",{staticClass:"line-number"},[a._v("30")]),t("br"),t("span",{staticClass:"line-number"},[a._v("31")]),t("br"),t("span",{staticClass:"line-number"},[a._v("32")]),t("br"),t("span",{staticClass:"line-number"},[a._v("33")]),t("br"),t("span",{staticClass:"line-number"},[a._v("34")]),t("br"),t("span",{staticClass:"line-number"},[a._v("35")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[a._v("$ scalac Marker"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("scala \n$ scala Marker\n创建颜色标记：red\n创建颜色标记：blue\n创建颜色标记：green\n颜色标记：red\n颜色标记：blue\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala-trait-特征"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-trait-特征"}},[a._v("#")]),a._v(" Scala Trait(特征)")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala Trait(特征) 相当于 Java 的接口，实际上它比接口还功能强大。")]),a._v(" "),t("p",[a._v("与接口不同的是，它还可以定义属性和方法的实现。")]),a._v(" "),t("p",[a._v("一般情况下Scala的类只能够继承单一父类，但是如果是 Trait(特征) 的话就可以继承多个，从结果来看就是实现了多重继承。")]),a._v(" "),t("p",[a._v("Trait(特征) 定义的方式与类类似，但它使用的关键字是 "),t("strong",[a._v("trait")]),a._v("，如下所示：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("trait Equal {\n  def isEqual(x: Any): Boolean\n  def isNotEqual(x: Any): Boolean = !isEqual(x)\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("以上Trait(特征)由两个方法组成："),t("strong",[a._v("isEqual")]),a._v(" 和 "),t("strong",[a._v("isNotEqual")]),a._v("。isEqual 方法没有定义方法的实现，isNotEqual定义了方法的实现。子类继承特征可以实现未被实现的方法。所以其实 Scala Trait(特征)更像 Java 的抽象类。")]),a._v(" "),t("p",[a._v("以下演示了特征的完整实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/* 文件名：Test.scala\n */\ntrait Equal {\n  def isEqual(x: Any): Boolean\n  def isNotEqual(x: Any): Boolean = !isEqual(x)\n}\n\nclass Point(xc: Int, yc: Int) extends Equal {\n  var x: Int = xc\n  var y: Int = yc\n  def isEqual(obj: Any) =\n    obj.isInstanceOf[Point] &&\n    obj.asInstanceOf[Point].x == x\n}\n\nobject Test {\n   def main(args: Array[String]) {\n      val p1 = new Point(2, 3)\n      val p2 = new Point(2, 4)\n      val p3 = new Point(3, 3)\n\n      println(p1.isNotEqual(p2))\n      println(p1.isNotEqual(p3))\n      println(p1.isNotEqual(2))\n   }\n}\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nfalse\ntrue\ntrue\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"特征构造顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特征构造顺序"}},[a._v("#")]),a._v(" 特征构造顺序")]),a._v(" "),t("p",[a._v("特征也可以有构造器，由字段的初始化和其他特征体中的语句构成。这些语句在任何混入该特征的对象在构造时都会被执行。")]),a._v(" "),t("p",[a._v("构造器的执行顺序：")]),a._v(" "),t("ul",[t("li",[a._v("调用超类的构造器；")]),a._v(" "),t("li",[a._v("特征构造器在超类构造器之后、类构造器之前执行；")]),a._v(" "),t("li",[a._v("特征由左到右被构造；")]),a._v(" "),t("li",[a._v("每个特征当中，父特征先被构造；")]),a._v(" "),t("li",[a._v("如果多个特征共有一个父特征，父特征不会被重复构造")]),a._v(" "),t("li",[a._v("所有特征被构造完毕，子类被构造。")])]),a._v(" "),t("p",[a._v("构造器的顺序是类的线性化的反向。线性化是描述某个类型的所有超类型的一种技术规格。")])]),a._v(" "),t("h3",{attrs:{id:"scala模式匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala模式匹配"}},[a._v("#")]),a._v(" Scala模式匹配")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 提供了强大的模式匹配机制，应用也非常广泛。")]),a._v(" "),t("p",[a._v("一个模式匹配包含了一系列备选项，每个都开始于关键字 "),t("strong",[a._v("case")]),a._v("。每个备选项都包含了一个模式及一到多个表达式。箭头符号 "),t("strong",[a._v("=>")]),a._v(" 隔开了模式和表达式。")]),a._v(" "),t("p",[a._v("以下是一个简单的整型值模式匹配实例：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      println(matchTest(3))\n\n   }\n   def matchTest(x: Int): String = x match {\n      case 1 => "one"\n      case 2 => "two"\n      case _ => "many"\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nmany\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("match 对应 Java 里的 switch，但是写在选择器表达式之后。即： "),t("strong",[a._v("选择器 match {备选项}。")])]),a._v(" "),t("p",[a._v("match 表达式通过以代码编写的先后次序尝试每个模式来完成计算，只要发现有一个匹配的case，剩下的case不会继续匹配。")]),a._v(" "),t("p",[a._v("接下来我们来看一个不同数据类型的模式匹配：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      println(matchTest("two"))\n      println(matchTest("test"))\n      println(matchTest(1))\n      println(matchTest(6))\n\n   }\n   def matchTest(x: Any): Any = x match {\n      case 1 => "one"\n      case "two" => 2\n      case y: Int => "scala.Int"\n      case _ => "many"\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n2\nmany\none\nscala.Int\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("p",[a._v("实例中第一个 case 对应整型数值 1，第二个 case 对应字符串值 two，第三个 case 对应类型模式，用于判断传入的值是否为整型，相比使用isInstanceOf来判断类型，使用模式匹配更好。第四个 case 表示默认的全匹配备选项，即没有找到其他匹配时的匹配项，类似 switch 中的 default。")]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"使用样例类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用样例类"}},[a._v("#")]),a._v(" 使用样例类")]),a._v(" "),t("p",[a._v("使用了case关键字的类定义就是就是样例类(case classes)，样例类是种特殊的类，经过优化以用于模式匹配。")]),a._v(" "),t("p",[a._v("以下是样例类的简单实例:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n       val alice = new Person("Alice", 25)\n    val bob = new Person("Bob", 32)\n       val charlie = new Person("Charlie", 32)\n   \n    for (person <- List(alice, bob, charlie)) {\n        person match {\n            case Person("Alice", 25) => println("Hi Alice!")\n            case Person("Bob", 32) => println("Hi Bob!")\n            case Person(name, age) =>\n               println("Age: " + age + " year, name: " + name + "?")\n         }\n      }\n   }\n   // 样例类\n   case class Person(name: String, age: Int)\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nHi Alice!\nHi Bob!\nAge: 32 year, name: Charlie?\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("在声明样例类时，下面的过程自动发生了：")]),a._v(" "),t("ul",[t("li",[a._v("构造器的每个参数都成为val，除非显式被声明为var，但是并不推荐这么做；")]),a._v(" "),t("li",[a._v("在伴生对象中提供了apply方法，所以可以不使用new关键字就可构建对象；")]),a._v(" "),t("li",[a._v("提供unapply方法使模式匹配可以工作；")]),a._v(" "),t("li",[a._v("生成toString、equals、hashCode和copy方法，除非显示给出这些方法的定义。")])])]),a._v(" "),t("h3",{attrs:{id:"scala正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala正则表达式"}},[a._v("#")]),a._v(" Scala正则表达式")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 通过 scala.util.matching 包中的 "),t("strong",[a._v("Regex")]),a._v(" 类来支持正则表达式。以下实例演示了使用正则表达式查找单词 "),t("strong",[a._v("Scala")]),a._v(" :")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import scala.util.matching.Regex\n\nobject Test {\n   def main(args: Array[String]) {\n      val pattern = "Scala".r\n      val str = "Scala is Scalable and cool"\n      \n      println(pattern findFirstIn str)\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nSome(Scala)\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("实例中使用 String 类的 r() 方法构造了一个Regex对象。")]),a._v(" "),t("p",[a._v("然后使用 findFirstIn 方法找到首个匹配项。")]),a._v(" "),t("p",[a._v("如果需要查看所有的匹配项可以使用 findAllIn 方法。")]),a._v(" "),t("p",[a._v("你可以使用 mkString( ) 方法来连接正则表达式匹配结果的字符串，并可以使用管道(|)来设置不同的模式：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import scala.util.matching.Regex\n\nobject Test {\n   def main(args: Array[String]) {\n      val pattern = new Regex("(S|s)cala")  // 首字母可以是大写 S 或小写 s\n      val str = "Scala is scalable and cool"\n      \n      println((pattern findAllIn str).mkString(","))   // 使用逗号 , 连接返回结果\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nScala,scala\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("如果你需要将匹配的文本替换为指定的关键词，可以使用 "),t("strong",[a._v("replaceFirstIn( )")]),a._v(" 方法来替换第一个匹配项，使用 "),t("strong",[a._v("replaceAllIn( )")]),a._v(" 方法替换所有匹配项，实例如下:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      val pattern = "(S|s)cala".r\n      val str = "Scala is scalable and cool"\n      \n      println(pattern replaceFirstIn(str, "Java"))\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nJava is scalable and cool\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[a._v("#")]),a._v(" 正则表达式")]),a._v(" "),t("p",[a._v("Scala 的正则表达式继承了 Java 的语法规则，Java 则大部分使用了 Perl 语言的规则。")]),a._v(" "),t("p",[a._v("下表我们给出了常用的一些正则表达式规则：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("表达式")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("匹配规则")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("^")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配输入字符串开始的位置。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("$")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配输入字符串结尾的位置。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v(".")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('匹配除"\\r\\n"之外的任何单个字符。')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[...]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('字符集。匹配包含的任一字符。例如，"[abc]"匹配"plain"中的"a"。')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[^...]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('反向字符集。匹配未包含的任何字符。例如，"[^abc]"匹配"plain"中"p"，"l"，"i"，"n"。')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\A")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配输入字符串开始的位置（无多行支持）")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\z")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("字符串结尾(类似$，但不受处理多行选项的影响)")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\Z")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("字符串结尾或行尾(不受处理多行选项的影响)")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("re*")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("重复零次或更多次")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("re+")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("重复一次或更多次")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("re?")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("重复零次或一次")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("re{ n}")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("重复n次")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("re{ n,}")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}})]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("re{ n, m}")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("重复n到m次")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("a|b")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配 a 或者 b")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("(re)")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配 re,并捕获文本到自动命名的组里")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("(?: re)")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配 re,不捕获匹配的文本，也不给此分组分配组号")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("(?> re)")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("贪婪子表达式")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\w")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配字母或数字或下划线或汉字")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\W")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配任意不是字母，数字，下划线，汉字的字符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\s")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配任意的空白符,相等于 [\\t\\n\\r\\f]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\S")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配任意不是空白符的字符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\d")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配数字，类似 [0-9]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\D")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配任意非数字的字符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\G")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("当前搜索的开头")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\n")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("换行符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\b")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("通常是单词分界位置，但如果在字符类里使用代表退格")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\B")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配不是单词开头或结束的位置")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\t")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("制表符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\Q")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("开始引号："),t("strong",[a._v("\\Q(a+b)*3\\E")]),a._v(' 可匹配文本 "(a+b)*3"。')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\E")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("结束引号："),t("strong",[a._v("\\Q(a+b)*3\\E")]),a._v(' 可匹配文本 "(a+b)*3"。')])])])]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"正则表达式实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式实例"}},[a._v("#")]),a._v(" 正则表达式实例")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[a._v("实例")]),a._v(" "),t("th",{staticStyle:{"text-align":"left"}},[a._v("描述")])])]),a._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v(".")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('匹配除"\\r\\n"之外的任何单个字符。')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[Rr]uby")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('匹配 "Ruby" 或 "ruby"')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("rub[ye]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('匹配 "ruby" 或 "rube"')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[aeiou]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配小写字母 ：aeiou")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[0-9]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配任何数字，类似 [0123456789]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[a-z]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配任何 ASCII 小写字母")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[A-Z]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配任何 ASCII 大写字母")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[a-zA-Z0-9]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配数字，大小写字母")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[^aeiou]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配除了 aeiou 其他字符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("[^0-9]")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配除了数字的其他字符")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\d")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配数字，类似: [0-9]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\D")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配非数字，类似: [^0-9]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\s")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配空格，类似: [ \\t\\r\\n\\f]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\S")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配非空格，类似: [^ \\t\\r\\n\\f]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\w")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配字母，数字，下划线，类似: [A-Za-z0-9_]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\W")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配非字母，数字，下划线，类似: [^A-Za-z0-9_]")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("ruby?")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('匹配 "rub" 或 "ruby": y 是可选的')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("ruby*")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('匹配 "rub" 加上 0 个或多个的 y。')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("ruby+")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('匹配 "rub" 加上 1 个或多个的 y。')])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\d{3}")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("刚好匹配 3 个数字。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\d{3,}")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配 3 个或多个数字。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\d{3,5}")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("匹配 3 个、4 个或 5 个数字。")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("\\D\\d+")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("无分组： + 重复 \\d")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("(\\D\\d)+/")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v("分组： + 重复 \\D\\d 对")])]),a._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[a._v("([Rr]uby(, )?)+")]),a._v(" "),t("td",{staticStyle:{"text-align":"left"}},[a._v('匹配 "Ruby"、"Ruby, ruby, ruby"，等等')])])])]),a._v(" "),t("p",[a._v("注意上表中的每个字符使用了两个反斜线。这是因为在 Java 和 Scala 中字符串中的反斜线是转义字符。所以如果你要输出 ..，你需要在字符串中写成 .\\. 来获取一个反斜线。查看以下实例：")]),a._v(" "),t("div",{staticClass:"language-scala line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-scala"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("scala"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("matching"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Regex\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("object")]),a._v(" Test "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("def")]),a._v(" main"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("args"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" Array"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" pattern "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" Regex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"abl[ae]\\\\d+"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("val")]),a._v(" str "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ablaw is able1 and cool"')]),a._v("\n      \n      println"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("pattern findAllIn str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("mkString"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('","')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nable1\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala异常处理"}},[a._v("#")]),a._v(" Scala异常处理")]),a._v(" "),t("blockquote",[t("p",[a._v("Scala 的异常处理和其它语言比如 Java 类似。")]),a._v(" "),t("p",[a._v("Scala 的方法可以通过抛出异常的方法的方式来终止相关代码的运行，不必通过返回值。")]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"抛出异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抛出异常"}},[a._v("#")]),a._v(" 抛出异常")]),a._v(" "),t("p",[a._v("Scala 抛出异常的方法和 Java一样，使用 throw 方法，例如，抛出一个新的参数异常：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("throw new IllegalArgumentException\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"捕获异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#捕获异常"}},[a._v("#")]),a._v(" 捕获异常")]),a._v(" "),t("p",[a._v("异常捕捉的机制与其他语言中一样，如果有异常发生，catch字句是按次序捕捉的。因此，在catch字句中，越具体的异常越要靠前，越普遍的异常越靠后。 如果抛出的异常不在catch字句中，该异常则无法处理，会被升级到调用者处。")]),a._v(" "),t("p",[a._v("捕捉异常的catch子句，语法与其他语言中不太一样。在Scala里，借用了模式匹配的思想来做异常的匹配，因此，在catch的代码里，是一系列case字句，如下例所示：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import java.io.FileReader\nimport java.io.FileNotFoundException\nimport java.io.IOException\n\nobject Test {\n   def main(args: Array[String]) {\n      try {\n         val f = new FileReader("input.txt")\n      } catch {\n         case ex: FileNotFoundException =>{\n            println("Missing file exception")\n         }\n         case ex: IOException => {\n            println("IO Exception")\n         }\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nMissing file exception\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("catch字句里的内容跟match里的case是完全一样的。由于异常捕捉是按次序，如果最普遍的异常，Throwable，写在最前面，则在它后面的case都捕捉不到，因此需要将它写在最后面。")]),a._v(" "),t("hr"),a._v(" "),t("h4",{attrs:{id:"finally-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#finally-语句"}},[a._v("#")]),a._v(" finally 语句")]),a._v(" "),t("p",[a._v("finally 语句用于执行不管是正常处理还是有异常发生时都需要执行的步骤，实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import java.io.FileReader\nimport java.io.FileNotFoundException\nimport java.io.IOException\n\nobject Test {\n   def main(args: Array[String]) {\n      try {\n         val f = new FileReader("input.txt")\n      } catch {\n         case ex: FileNotFoundException => {\n            println("Missing file exception")\n         }\n         case ex: IOException => {\n            println("IO Exception")\n         }\n      } finally {\n         println("Exiting finally...")\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nMissing file exception\nExiting finally...\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala提取器-extractor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala提取器-extractor"}},[a._v("#")]),a._v(" Scala提取器（Extractor）")]),a._v(" "),t("blockquote",[t("p",[a._v("提取器是从传递给它的对象中提取出构造该对象的参数。")]),a._v(" "),t("p",[a._v("Scala 标准库包含了一些预定义的提取器，我们会大致的了解一下它们。")]),a._v(" "),t("p",[a._v("Scala 提取器是一个带有unapply方法的对象。unapply方法算是apply方法的反向操作：unapply接受一个对象，然后从对象中提取值，提取的值通常是用来构造该对象的值。")]),a._v(" "),t("p",[a._v("以下实例演示了邮件地址的提取器对象：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      \n      println ("Apply 方法 : " + apply("Zara", "gmail.com"));\n      println ("Unapply 方法 : " + unapply("Zara@gmail.com"));\n      println ("Unapply 方法 : " + unapply("Zara Ali"));\n\n   }\n   // 注入方法 (可选)\n   def apply(user: String, domain: String) = {\n      user +"@"+ domain\n   }\n\n   // 提取方法（必选）\n   def unapply(str: String): Option[(String, String)] = {\n      val parts = str split "@"\n      if (parts.length == 2){\n         Some(parts(0), parts(1)) \n      }else{\n         None\n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\nApply 方法 : Zara@gmail.com\nUnapply 方法 : Some((Zara,gmail.com))\nUnapply 方法 : None\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("以上对象定义了两个方法： "),t("strong",[a._v("apply")]),a._v(" 和 "),t("strong",[a._v("unapply")]),a._v(' 方法。通过 apply 方法我们无需使用 new 操作就可以创建对象。所以你可以通过语句 Test("Zara", "gmail.com") 来构造一个字符串 "Zara@gmail.com"。')]),a._v(" "),t("p",[a._v("unapply方法算是apply方法的反向操作：unapply接受一个对象，然后从对象中提取值，提取的值通常是用来构造该对象的值。实例中我们使用 Unapply 方法从对象中提取用户名和邮件地址的后缀。")]),a._v(" "),t("p",[a._v("实例中 unapply 方法在传入的字符串不是邮箱地址时返回 None。代码演示如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('unapply("Zara@gmail.com") 相等于 Some("Zara", "gmail.com")\nunapply("Zara Ali") 相等于 None\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"提取器使用模式匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提取器使用模式匹配"}},[a._v("#")]),a._v(" 提取器使用模式匹配")]),a._v(" "),t("p",[a._v("在我们实例化一个类的时，可以带上0个或者多个的参数，编译器在实例化的时会调用 apply 方法。我们可以在类和对象中都定义 apply 方法。")]),a._v(" "),t("p",[a._v("就像我们之前提到过的，unapply 用于提取我们指定查找的值，它与 apply 的操作相反。 当我们在提取器对象中使用 match 语句是，unapply 将自动执行，如下所示：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('object Test {\n   def main(args: Array[String]) {\n      \n      val x = Test(5)\n      println(x)\n\n      x match\n      {\n         case Test(num) => println(x + " 是 " + num + " 的两倍！")\n         //unapply 被调用\n         case _ => println("无法计算")\n      }\n\n   }\n   def apply(x: Int) = x*2\n   def unapply(z: Int): Option[Int] = if (z%2==0) Some(z/2) else None\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n10\n10 是 5 的两倍！\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])]),a._v(" "),t("h3",{attrs:{id:"scala-文件i-o"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-文件i-o"}},[a._v("#")]),a._v(" Scala 文件I/O")]),a._v(" "),t("blockquote",[t("h4",{attrs:{id:"scala-进行文件写操作-直接用的都是-java中-的-i-o-类-java-io-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scala-进行文件写操作-直接用的都是-java中-的-i-o-类-java-io-file"}},[a._v("#")]),a._v(" Scala 进行文件写操作，直接用的都是 java中 的 I/O 类 （"),t("strong",[a._v("java.io.File")]),a._v(")：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import java.io._\n\nobject Test {\n   def main(args: Array[String]) {\n      val writer = new PrintWriter(new File("test.txt" ))\n\n      writer.write("菜鸟教程")\n      writer.close()\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v('执行以上代码，会在你的当前目录下生产一个 test.txt 文件，文件内容为"菜鸟教程":')]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n$ cat test.txt \n菜鸟教程\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"从屏幕上读取用户输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从屏幕上读取用户输入"}},[a._v("#")]),a._v(" 从屏幕上读取用户输入")]),a._v(" "),t("p",[a._v("有时候我们需要接收用户在屏幕输入的指令来处理程序。实例如下：")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import scala.io._\nobject Test {\n   def main(args: Array[String]) {\n      print("请输入weekdawn : " )\n      val line = StdIn.readLine()\n\n      println("谢谢，你输入的是: " + line)\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("blockquote",[t("p",[a._v("Scala2.11 后的版本 "),t("strong",[a._v("Console.readLine")]),a._v(" 已废弃，使用 "),t("strong",[a._v("scala.io.StdIn.readLine()")]),a._v(" 方法代替。")])]),a._v(" "),t("p",[a._v("执行以上代码，屏幕上会显示如下信息:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n请输入菜鸟教程官网 : www.runoob.com\n谢谢，你输入的是: www.runoob.com\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("hr"),a._v(" "),t("h4",{attrs:{id:"从文件上读取内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从文件上读取内容"}},[a._v("#")]),a._v(" 从文件上读取内容")]),a._v(" "),t("p",[a._v("从文件读取内容非常简单。我们可以使用 Scala 的 "),t("strong",[a._v("Source")]),a._v(' 类及伴生对象来读取文件。以下实例演示了从 "test.txt"(之前已创建过) 文件中读取内容:')]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('import scala.io.Source\n\nobject Test {\n   def main(args: Array[String]) {\n      println("文件内容为:" )\n\n      Source.fromFile("test.txt" ).foreach{ \n         print \n      }\n   }\n}\n')])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br")])]),t("p",[a._v("执行以上代码，输出结果为:")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$ scalac Test.scala \n$ scala Test\n文件内容为:\nweekdawn\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);