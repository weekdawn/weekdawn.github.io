(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{659:function(s,n,a){"use strict";a.r(n);var e=a(7),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"sequential-顺序模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sequential-顺序模型"}},[s._v("#")]),s._v(" Sequential 顺序模型")]),s._v(" "),a("p",[s._v("顺序模型是多个网络层的线性堆叠。")]),s._v(" "),a("p",[s._v("你可以通过将网络层实例的列表传递给 "),a("code",[s._v("Sequential")]),s._v(" 的构造器，来创建一个 "),a("code",[s._v("Sequential")]),s._v(" 模型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.models import Sequential\nfrom keras.layers import Dense, Activation\n\nmodel = Sequential([\n    Dense(32, input_shape=(784,)),\n    Activation('relu'),\n    Dense(10),\n    Activation('softmax'),\n])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("也可以简单地使用 "),a("code",[s._v(".add()")]),s._v(" 方法将各层添加到模型中：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("model = Sequential()\nmodel.add(Dense(32, input_dim=784))\nmodel.add(Activation('relu'))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"指定输入数据的尺寸"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定输入数据的尺寸"}},[s._v("#")]),s._v(" 指定输入数据的尺寸")]),s._v(" "),a("p",[s._v("模型需要知道它所期望的输入的尺寸。出于这个原因，顺序模型中的第一层（且只有第一层，因为下面的层可以自动地推断尺寸）需要接收关于其输入尺寸的信息。有几种方法来做到这一点：")]),s._v(" "),a("ul",[a("li",[s._v("传递一个 "),a("code",[s._v("input_shape")]),s._v(" 参数给第一层。它是一个表示尺寸的元组 (一个整数或 "),a("code",[s._v("None")]),s._v(" 的元组，其中 "),a("code",[s._v("None")]),s._v(" 表示可能为任何正整数)。在 "),a("code",[s._v("input_shape")]),s._v(" 中不包含数据的 batch 大小。")]),s._v(" "),a("li",[s._v("某些 2D 层，例如 "),a("code",[s._v("Dense")]),s._v("，支持通过参数 "),a("code",[s._v("input_dim")]),s._v(" 指定输入尺寸，某些 3D 时序层支持 "),a("code",[s._v("input_dim")]),s._v(" 和 "),a("code",[s._v("input_length")]),s._v(" 参数。")]),s._v(" "),a("li",[s._v("如果你需要为你的输入指定一个固定的 batch 大小（这对 stateful RNNs 很有用），你可以传递一个 "),a("code",[s._v("batch_size")]),s._v(" 参数给一个层。如果你同时将 "),a("code",[s._v("batch_size=32")]),s._v(" 和 "),a("code",[s._v("input_shape=(6, 8)")]),s._v(" 传递给一个层，那么每一批输入的尺寸就为 "),a("code",[s._v("(32，6，8)")]),s._v("。")])]),s._v(" "),a("p",[s._v("因此，下面的代码片段是等价的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("model = Sequential()\nmodel.add(Dense(32, input_shape=(784,)))\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=784))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"模型编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型编译"}},[s._v("#")]),s._v(" 模型编译")]),s._v(" "),a("p",[s._v("在训练模型之前，您需要配置学习过程，这是通过 "),a("code",[s._v("compile")]),s._v(" 方法完成的。它接收三个参数：")]),s._v(" "),a("ul",[a("li",[s._v("优化器 optimizer。它可以是现有优化器的字符串标识符，如 "),a("code",[s._v("rmsprop")]),s._v(" 或 "),a("code",[s._v("adagrad")]),s._v("，也可以是 Optimizer 类的实例。详见："),a("a",{attrs:{href:"https://keras.io/optimizers",target:"_blank",rel:"noopener noreferrer"}},[s._v("optimizers"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("li",[s._v("损失函数 loss，模型试图最小化的目标函数。它可以是现有损失函数的字符串标识符，如 "),a("code",[s._v("categorical_crossentropy")]),s._v(" 或 "),a("code",[s._v("mse")]),s._v("，也可以是一个目标函数。详见："),a("a",{attrs:{href:"https://keras.io/losses",target:"_blank",rel:"noopener noreferrer"}},[s._v("losses"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("li",[s._v("评估标准 metrics。对于任何分类问题，你都希望将其设置为 "),a("code",[s._v("metrics = ['accuracy']")]),s._v("。评估标准可以是现有的标准的字符串标识符，也可以是自定义的评估标准函数。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 多分类问题\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# 二分类问题\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# 均方误差回归问题\nmodel.compile(optimizer='rmsprop',\n              loss='mse')\n\n# 自定义评估标准函数\nimport keras.backend as K\n\ndef mean_pred(y_true, y_pred):\n    return K.mean(y_pred)\n\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy', mean_pred])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h2",{attrs:{id:"模型训练"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型训练"}},[s._v("#")]),s._v(" 模型训练")]),s._v(" "),a("p",[s._v("Keras 模型在输入数据和标签的 Numpy 矩阵上进行训练。为了训练一个模型，你通常会使用 "),a("code",[s._v("fit")]),s._v(" 函数。"),a("a",{attrs:{href:"https://keras.io/models/sequential",target:"_blank",rel:"noopener noreferrer"}},[s._v("文档详见此处"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 对于具有 2 个类的单输入模型（二进制分类）：\n\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_dim=100))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# 生成虚拟数据\nimport numpy as np\ndata = np.random.random((1000, 100))\nlabels = np.random.randint(2, size=(1000, 1))\n\n# 训练模型，以 32 个样本为一个 batch 进行迭代\nmodel.fit(data, labels, epochs=10, batch_size=32)\n# 对于具有 10 个类的单输入模型（多分类分类）：\n\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_dim=100))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# 生成虚拟数据\nimport numpy as np\ndata = np.random.random((1000, 100))\nlabels = np.random.randint(10, size=(1000, 1))\n\n# 将标签转换为分类的 one-hot 编码\none_hot_labels = keras.utils.to_categorical(labels, num_classes=10)\n\n# 训练模型，以 32 个样本为一个 batch 进行迭代\nmodel.fit(data, one_hot_labels, epochs=10, batch_size=32)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[s._v("补充：keras全连接层Dense")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("keras.layers.core.Dense(\nunits, #代表该层的输出维度\nactivation=None, #激活函数.但是默认 liner\nuse_bias=True, #是否使用b\nkernel_initializer='glorot_uniform', #初始化w权重，keras/initializers.py\nbias_initializer='zeros', #初始化b权重\nkernel_regularizer=None, #施加在权重w上的正则项,keras/regularizer.py\nbias_regularizer=None, #施加在偏置向量b上的正则项\nactivity_regularizer=None, #施加在输出上的正则项\nkernel_constraint=None, #施加在权重w上的约束项\nbias_constraint=None #施加在偏置b上的约束项\n)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"基于多层感知器-mlp-的-softmax-多分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于多层感知器-mlp-的-softmax-多分类"}},[s._v("#")]),s._v(" 基于多层感知器 (MLP) 的 softmax 多分类：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.optimizers import SGD\n\n# 生成虚拟数据\nimport numpy as np\nx_train = np.random.random((1000, 20))\ny_train = keras.utils.to_categorical(np.random.randint(10, size=(1000, 1)), num_classes=10)\nx_test = np.random.random((100, 20))\ny_test = keras.utils.to_categorical(np.random.randint(10, size=(100, 1)), num_classes=10)\n\nmodel = Sequential()\n# Dense(64) 是一个具有 64 个隐藏神经元的全连接层。\n# 在第一层必须指定所期望的输入数据尺寸：\n# 在这里，是一个 20 维的向量。\nmodel.add(Dense(64, activation='relu', input_dim=20))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))\n\nsgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=sgd,\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n          epochs=20,\n          batch_size=128)\nscore = model.evaluate(x_test, y_test, batch_size=128)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h3",{attrs:{id:"基于多层感知器的二分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于多层感知器的二分类"}},[s._v("#")]),s._v(" 基于多层感知器的二分类：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\n\n# 生成虚拟数据\nx_train = np.random.random((1000, 20))\ny_train = np.random.randint(2, size=(1000, 1))\nx_test = np.random.random((100, 20))\ny_test = np.random.randint(2, size=(100, 1))\n\nmodel = Sequential()\nmodel.add(Dense(64, input_dim=20, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer='rmsprop',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n          epochs=20,\n          batch_size=128)\nscore = model.evaluate(x_test, y_test, batch_size=128)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h1",{attrs:{id:"keras-函数式-api-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keras-函数式-api-model"}},[s._v("#")]),s._v(" Keras 函数式 API--Model")]),s._v(" "),a("h2",{attrs:{id:"例一-全连接网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例一-全连接网络"}},[s._v("#")]),s._v(" 例一：全连接网络")]),s._v(" "),a("p",[a("code",[s._v("Sequential")]),s._v(" 模型可能是实现这种网络的一个更好选择，但这个例子能够帮助我们进行一些简单的理解。")]),s._v(" "),a("ul",[a("li",[s._v("网络层的实例是可调用的，它以张量为参数，并且返回一个张量")]),s._v(" "),a("li",[s._v("输入和输出均为张量，它们都可以用来定义一个模型（"),a("code",[s._v("Model")]),s._v("）")]),s._v(" "),a("li",[s._v("这样的模型同 Keras 的 "),a("code",[s._v("Sequential")]),s._v(" 模型一样，都可以被训练")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.layers import Input, Dense\nfrom keras.models import Model\n\n# 这部分返回一个张量\ninputs = Input(shape=(784,))\n\n# 层的实例是可调用的，它以张量为参数，并且返回一个张量\nx = Dense(64, activation='relu')(inputs)\nx = Dense(64, activation='relu')(x)\npredictions = Dense(10, activation='softmax')(x)\n\n# 这部分创建了一个包含输入层和三个全连接层的模型\nmodel = Model(inputs=inputs, outputs=predictions)\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\nmodel.fit(data, labels)  # 开始训练\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"所有的模型都可调用-就像网络层一样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#所有的模型都可调用-就像网络层一样"}},[s._v("#")]),s._v(" 所有的模型都可调用，就像网络层一样")]),s._v(" "),a("p",[s._v("利用函数式 API，可以轻易地重用训练好的模型：可以将任何模型看作是一个层，然后通过传递一个张量来调用它。注意，在调用模型时，您不仅重用模型的"),a("em",[s._v("结构")]),s._v("，还重用了它的权重。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("x = Input(shape=(784,))\n# 这是可行的，并且返回上面定义的 10-way softmax。\ny = model(x)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这种方式能允许我们快速创建可以处理"),a("em",[s._v("序列输入")]),s._v("的模型。只需一行代码，你就将图像分类模型转换为视频分类模型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.layers import TimeDistributed\n\n# 输入张量是 20 个时间步的序列，\n# 每一个时间为一个 784 维的向量\ninput_sequences = Input(shape=(20, 784))\n\n# 这部分将我们之前定义的模型应用于输入序列中的每个时间步。\n# 之前定义的模型的输出是一个 10-way softmax，\n# 因而下面的层的输出将是维度为 10 的 20 个向量的序列。\nprocessed_sequences = TimeDistributed(model)(input_sequences)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"多输入多输出模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多输入多输出模型"}},[s._v("#")]),s._v(" 多输入多输出模型")]),s._v(" "),a("p",[s._v("以下是函数式 API 的一个很好的例子：具有多个输入和输出的模型。函数式 API 使处理大量交织的数据流变得容易。")]),s._v(" "),a("p",[s._v("来考虑下面的模型。我们试图预测 Twitter 上的一条新闻标题有多少转发和点赞数。模型的主要输入将是新闻标题本身，即一系列词语，但是为了增添趣味，我们的模型还添加了其他的辅助输入来接收额外的数据，例如新闻标题的发布的时间等。 该模型也将通过两个损失函数进行监督学习。较早地在模型中使用主损失函数，是深度学习模型的一个良好正则方法。")]),s._v(" "),a("p",[s._v("模型结构如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://keras.io/img/multi-input-multi-output-graph.png",alt:""}})]),s._v(" "),a("p",[s._v("让我们用函数式 API 来实现它。")]),s._v(" "),a("p",[s._v("主要输入接收新闻标题本身，即一个整数序列（每个整数编码一个词）。 这些整数在 1 到 10,000 之间（10,000 个词的词汇表），且序列长度为 100 个词。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.layers import Input, Embedding, LSTM, Dense\nfrom keras.models import Model\n\n# 标题输入：接收一个含有 100 个整数的序列，每个整数在 1 到 10000 之间。\n# 注意我们可以通过传递一个 \"name\" 参数来命名任何层。\nmain_input = Input(shape=(100,), dtype='int32', name='main_input')\n\n# Embedding 层将输入序列编码为一个稠密向量的序列，\n# 每个向量维度为 512。\nx = Embedding(output_dim=512, input_dim=10000, input_length=100)(main_input)\n\n# LSTM 层把向量序列转换成单个向量，\n# 它包含整个序列的上下文信息\nlstm_out = LSTM(32)(x)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("在这里，我们插入辅助损失，使得即使在模型主损失很高的情况下，LSTM 层和 Embedding 层都能被平稳地训练。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("auxiliary_output = Dense(1, activation='sigmoid', name='aux_output')(lstm_out)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("此时，我们将辅助输入数据与 LSTM 层的输出连接起来，输入到模型中：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("auxiliary_input = Input(shape=(5,), name='aux_input')\nx = keras.layers.concatenate([lstm_out, auxiliary_input])\n\n# 堆叠多个全连接网络层\nx = Dense(64, activation='relu')(x)\nx = Dense(64, activation='relu')(x)\nx = Dense(64, activation='relu')(x)\n\n# 最后添加主要的逻辑回归层\nmain_output = Dense(1, activation='sigmoid', name='main_output')(x)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("然后定义一个具有两个输入和两个输出的模型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("model = Model(inputs=[main_input, auxiliary_input], outputs=[main_output, auxiliary_output])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("现在编译模型，并给辅助损失分配一个 0.2 的权重。如果要为不同的输出指定不同的 "),a("code",[s._v("loss_weights")]),s._v(" 或 "),a("code",[s._v("loss")]),s._v("，可以使用列表或字典。 在这里，我们给 "),a("code",[s._v("loss")]),s._v(" 参数传递单个损失函数，这个损失将用于所有的输出。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("model.compile(optimizer='rmsprop', loss='binary_crossentropy',\n              loss_weights=[1., 0.2])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们可以通过传递输入数组和目标数组的列表来训练模型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("model.fit([headline_data, additional_data], [labels, labels],\n          epochs=50, batch_size=32)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("由于输入和输出均被命名了（在定义时传递了一个 "),a("code",[s._v("name")]),s._v(" 参数），我们也可以通过以下方式编译模型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("model.compile(optimizer='rmsprop',\n              loss={'main_output': 'binary_crossentropy', 'aux_output': 'binary_crossentropy'},\n              loss_weights={'main_output': 1., 'aux_output': 0.2})\n\n# 然后使用以下方式训练：\nmodel.fit({'main_input': headline_data, 'aux_input': additional_data},\n          {'main_output': labels, 'aux_output': labels},\n          epochs=50, batch_size=32)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"共享网络层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享网络层"}},[s._v("#")]),s._v(" 共享网络层")]),s._v(" "),a("p",[s._v("函数式 API 的另一个用途是使用共享网络层的模型。我们来看看共享层。")]),s._v(" "),a("p",[s._v("来考虑推特推文数据集。我们想要建立一个模型来分辨两条推文是否来自同一个人（例如，通过推文的相似性来对用户进行比较）。")]),s._v(" "),a("p",[s._v("实现这个目标的一种方法是建立一个模型，将两条推文编码成两个向量，连接向量，然后添加逻辑回归层；这将输出两条推文来自同一作者的概率。模型将接收一对对正负表示的推特数据。")]),s._v(" "),a("p",[s._v("由于这个问题是对称的，编码第一条推文的机制应该被完全重用来编码第二条推文（权重及其他全部）。这里我们使用一个共享的 LSTM 层来编码推文。")]),s._v(" "),a("p",[s._v("让我们使用函数式 API 来构建它。首先我们将一条推特转换为一个尺寸为 "),a("code",[s._v("(280, 256)")]),s._v(" 的矩阵，即每条推特 280 字符，每个字符为 256 维的 one-hot 编码向量 （取 256 个常用字符）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import keras\nfrom keras.layers import Input, LSTM, Dense\nfrom keras.models import Model\n\ntweet_a = Input(shape=(280, 256))\ntweet_b = Input(shape=(280, 256))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("要在不同的输入上共享同一个层，只需实例化该层一次，然后根据需要传入你想要的输入即可：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 这一层可以输入一个矩阵，并返回一个 64 维的向量\nshared_lstm = LSTM(64)\n\n# 当我们重用相同的图层实例多次，图层的权重也会被重用 (它其实就是同一层)\nencoded_a = shared_lstm(tweet_a)\nencoded_b = shared_lstm(tweet_b)\n\n# 然后再连接两个向量：\nmerged_vector = keras.layers.concatenate([encoded_a, encoded_b], axis=-1)\n\n# 再在上面添加一个逻辑回归层\npredictions = Dense(1, activation='sigmoid')(merged_vector)\n\n# 定义一个连接推特输入和预测的可训练的模型\nmodel = Model(inputs=[tweet_a, tweet_b], outputs=predictions)\n\nmodel.compile(optimizer='rmsprop',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\nmodel.fit([data_a, data_b], labels, epochs=10)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("让我们暂停一会，看看如何读取共享层的输出或输出尺寸。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"层「节点」的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#层「节点」的概念"}},[s._v("#")]),s._v(" 层「节点」的概念")]),s._v(" "),a("p",[s._v("每当你在某个输入上调用一个层时，都将创建一个新的张量（层的输出），并且为该层添加一个「节点」，将输入张量连接到输出张量。当多次调用同一个图层时，该图层将拥有多个节点索引 (0, 1, 2...)。")]),s._v(" "),a("p",[s._v("在之前版本的 Keras 中，可以通过 "),a("code",[s._v("layer.get_output()")]),s._v(" 来获得层实例的输出张量，或者通过 "),a("code",[s._v("layer.output_shape")]),s._v(" 来获取其输出形状。现在你依然可以这么做（除了 "),a("code",[s._v("get_output()")]),s._v(" 已经被 "),a("code",[s._v("output")]),s._v(" 属性替代）。但是如果一个层与多个输入连接呢？")]),s._v(" "),a("p",[s._v("只要一个层仅仅连接到一个输入，就不会有困惑，"),a("code",[s._v(".output")]),s._v(" 会返回层的唯一输出：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("a = Input(shape=(280, 256))\n\nlstm = LSTM(32)\nencoded_a = lstm(a)\n\nassert lstm.output == encoded_a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("但是如果该层有多个输入，那就会出现问题：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("a = Input(shape=(280, 256))\nb = Input(shape=(280, 256))\n\nlstm = LSTM(32)\nencoded_a = lstm(a)\nencoded_b = lstm(b)\n\nlstm.output\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('>> AttributeError: Layer lstm_1 has multiple inbound nodes,\nhence the notion of "layer output" is ill-defined.\nUse `get_output_at(node_index)` instead.\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("好吧，通过下面的方法可以解决：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("assert lstm.get_output_at(0) == encoded_a\nassert lstm.get_output_at(1) == encoded_b\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("够简单，对吧？")]),s._v(" "),a("p",[a("code",[s._v("input_shape")]),s._v(" 和 "),a("code",[s._v("output_shape")]),s._v(" 这两个属性也是如此：只要该层只有一个节点，或者只要所有节点具有相同的输入/输出尺寸，那么「层输出/输入尺寸」的概念就被很好地定义，并且将由 "),a("code",[s._v("layer.output_shape")]),s._v(" / "),a("code",[s._v("layer.input_shape")]),s._v(" 返回。但是比如说，如果将一个 "),a("code",[s._v("Conv2D")]),s._v(" 层先应用于尺寸为 "),a("code",[s._v("(32，32，3)")]),s._v(" 的输入，再应用于尺寸为 "),a("code",[s._v("(64, 64, 3)")]),s._v(" 的输入，那么这个层就会有多个输入/输出尺寸，你将不得不通过指定它们所属节点的索引来获取它们：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("a = Input(shape=(32, 32, 3))\nb = Input(shape=(64, 64, 3))\n\nconv = Conv2D(16, (3, 3), padding='same')\nconved_a = conv(a)\n\n# 到目前为止只有一个输入，以下可行：\nassert conv.input_shape == (None, 32, 32, 3)\n\nconved_b = conv(b)\n# 现在 `.input_shape` 属性不可行，但是这样可以：\nassert conv.get_input_shape_at(0) == (None, 32, 32, 3)\nassert conv.get_input_shape_at(1) == (None, 64, 64, 3)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"更多的例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多的例子"}},[s._v("#")]),s._v(" 更多的例子")]),s._v(" "),a("p",[s._v("代码示例仍然是起步的最佳方式，所以这里还有更多的例子。")]),s._v(" "),a("h3",{attrs:{id:"inception-模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inception-模型"}},[s._v("#")]),s._v(" Inception 模型")]),s._v(" "),a("p",[s._v("有关 Inception 结构的更多信息，请参阅 "),a("a",{attrs:{href:"http://arxiv.org/abs/1409.4842",target:"_blank",rel:"noopener noreferrer"}},[s._v("Going Deeper with Convolutions"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.layers import Conv2D, MaxPooling2D, Input\n\ninput_img = Input(shape=(256, 256, 3))\n\ntower_1 = Conv2D(64, (1, 1), padding='same', activation='relu')(input_img)\ntower_1 = Conv2D(64, (3, 3), padding='same', activation='relu')(tower_1)\n\ntower_2 = Conv2D(64, (1, 1), padding='same', activation='relu')(input_img)\ntower_2 = Conv2D(64, (5, 5), padding='same', activation='relu')(tower_2)\n\ntower_3 = MaxPooling2D((3, 3), strides=(1, 1), padding='same')(input_img)\ntower_3 = Conv2D(64, (1, 1), padding='same', activation='relu')(tower_3)\n\noutput = keras.layers.concatenate([tower_1, tower_2, tower_3], axis=1)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"卷积层上的残差连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卷积层上的残差连接"}},[s._v("#")]),s._v(" 卷积层上的残差连接")]),s._v(" "),a("p",[s._v("有关残差网络 (Residual Network) 的更多信息，请参阅 "),a("a",{attrs:{href:"http://arxiv.org/abs/1512.03385",target:"_blank",rel:"noopener noreferrer"}},[s._v("Deep Residual Learning for Image Recognition"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.layers import Conv2D, Input\n\n# 输入张量为 3 通道 256x256 图像\nx = Input(shape=(256, 256, 3))\n# 3 输出通道（与输入通道相同）的 3x3 卷积核\ny = Conv2D(3, (3, 3), padding='same')(x)\n# 返回 x + y\nz = keras.layers.add([x, y])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"共享视觉模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享视觉模型"}},[s._v("#")]),s._v(" 共享视觉模型")]),s._v(" "),a("p",[s._v("该模型在两个输入上重复使用同一个图像处理模块，以判断两个 MNIST 数字是否为相同的数字。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.layers import Conv2D, MaxPooling2D, Input, Dense, Flatten\nfrom keras.models import Model\n\n# 首先，定义视觉模型\ndigit_input = Input(shape=(27, 27, 1))\nx = Conv2D(64, (3, 3))(digit_input)\nx = Conv2D(64, (3, 3))(x)\nx = MaxPooling2D((2, 2))(x)\nout = Flatten()(x)\n\nvision_model = Model(digit_input, out)\n\n# 然后，定义区分数字的模型\ndigit_a = Input(shape=(27, 27, 1))\ndigit_b = Input(shape=(27, 27, 1))\n\n# 视觉模型将被共享，包括权重和其他所有\nout_a = vision_model(digit_a)\nout_b = vision_model(digit_b)\n\nconcatenated = keras.layers.concatenate([out_a, out_b])\nout = Dense(1, activation='sigmoid')(concatenated)\n\nclassification_model = Model([digit_a, digit_b], out)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h3",{attrs:{id:"视觉问答模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视觉问答模型"}},[s._v("#")]),s._v(" 视觉问答模型")]),s._v(" "),a("p",[s._v("当被问及关于图片的自然语言问题时，该模型可以选择正确的单词作答。")]),s._v(" "),a("p",[s._v("它通过将问题和图像编码成向量，然后连接两者，在上面训练一个逻辑回归，来从词汇表中挑选一个可能的单词作答。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.layers import Conv2D, MaxPooling2D, Flatten\nfrom keras.layers import Input, LSTM, Embedding, Dense\nfrom keras.models import Model, Sequential\n\n# 首先，让我们用 Sequential 来定义一个视觉模型。\n# 这个模型会把一张图像编码为向量。\nvision_model = Sequential()\nvision_model.add(Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(224, 224, 3)))\nvision_model.add(Conv2D(64, (3, 3), activation='relu'))\nvision_model.add(MaxPooling2D((2, 2)))\nvision_model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))\nvision_model.add(Conv2D(128, (3, 3), activation='relu'))\nvision_model.add(MaxPooling2D((2, 2)))\nvision_model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))\nvision_model.add(Conv2D(256, (3, 3), activation='relu'))\nvision_model.add(Conv2D(256, (3, 3), activation='relu'))\nvision_model.add(MaxPooling2D((2, 2)))\nvision_model.add(Flatten())\n\n# 现在让我们用视觉模型来得到一个输出张量：\nimage_input = Input(shape=(224, 224, 3))\nencoded_image = vision_model(image_input)\n\n# 接下来，定义一个语言模型来将问题编码成一个向量。\n# 每个问题最长 100 个词，词的索引从 1 到 9999.\nquestion_input = Input(shape=(100,), dtype='int32')\nembedded_question = Embedding(input_dim=10000, output_dim=256, input_length=100)(question_input)\nencoded_question = LSTM(256)(embedded_question)\n\n# 连接问题向量和图像向量：\nmerged = keras.layers.concatenate([encoded_question, encoded_image])\n\n# 然后在上面训练一个 1000 词的逻辑回归模型：\noutput = Dense(1000, activation='softmax')(merged)\n\n# 最终模型：\nvqa_model = Model(inputs=[image_input, question_input], outputs=output)\n\n# 下一步就是在真实数据上训练模型。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("h3",{attrs:{id:"视频问答模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视频问答模型"}},[s._v("#")]),s._v(" 视频问答模型")]),s._v(" "),a("p",[s._v("现在我们已经训练了图像问答模型，我们可以很快地将它转换为视频问答模型。在适当的训练下，你可以给它展示一小段视频（例如 100 帧的人体动作），然后问它一个关于这段视频的问题（例如，「这个人在做什么运动？」 -> 「足球」）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from keras.layers import TimeDistributed\n\nvideo_input = Input(shape=(100, 224, 224, 3))\n# 这是基于之前定义的视觉模型（权重被重用）构建的视频编码\nencoded_frame_sequence = TimeDistributed(vision_model)(video_input)  # 输出为向量的序列\nencoded_video = LSTM(256)(encoded_frame_sequence)  # 输出为一个向量\n\n# 这是问题编码器的模型级表示，重复使用与之前相同的权重：\nquestion_encoder = Model(inputs=question_input, outputs=encoded_question)\n\n# 让我们用它来编码这个问题：\nvideo_question_input = Input(shape=(100,), dtype='int32')\nencoded_video_question = question_encoder(video_question_input)\n\n# 这就是我们的视频问答模式：\nmerged = keras.layers.concatenate([encoded_video, encoded_video_question])\noutput = Dense(1000, activation='softmax')(merged)\nvideo_qa_model = Model(inputs=[video_input, video_question_input], outputs=output)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);