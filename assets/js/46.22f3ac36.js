(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{652:function(t,e,i){"use strict";i.r(e);var n=i(7),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"背景"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),i("p",[t._v("日常开发中，项目基本上都是由多个人进行开发和维护，每个人的代码书写习惯和风格又不尽相同，commit 的提交信息也是杂乱无章，为以后的开发和维护增添了很多困难。所以在多人协作下，代码的规范和约束极其重要。最好的办法是从项目初期就把项目的地基打好，定义好这个项目的编码和工程规范，以前的方案是分别部署 Eslint + Prettier + Husky + Commitlint+ Lint-staged。这一套方案如果挨个部署会写很多配置文件，极其耗费精力。")]),t._v(" "),i("p",[i("a",{attrs:{href:"https://www.npmjs.com/package/f2elint",target:"_blank",rel:"noopener noreferrer"}},[t._v("F2ELint"),i("OutboundLink")],1),t._v(" 是《阿里巴巴前端规约》的配套 Lint 工具，可以为项目一键接入规约、一键扫描和修复规约问题，保障项目的编码规范和代码质量。项目主要包括「规约文档」和「配套工具」两部分，目前只开放了「配套工具」部分，可以使用 F2ELint 等配套工具实现项目规范。")]),t._v(" "),i("p",[t._v("下面讲解如何为项目接入 f2elint。")]),t._v(" "),i("h2",{attrs:{id:"f2elint-安装"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#f2elint-安装"}},[t._v("#")]),t._v(" f2elint 安装")]),t._v(" "),i("p",[t._v("定义好项目相关信息后，安装 f2elint")]),t._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("npm install f2elint -g\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br")])]),i("p",[t._v("安装过程会选择这个项目相关语言、框架、lint 信息，我的项目目前使用 Vue 框架，同时也不需要 MarkdownLint，所以选 styleLint 和 Prettier 格式化代码（Eslint 和 Commitlint 是默认的）。大家可根据自己的项目实际情况进行选择。\n"),i("img",{attrs:{src:"https://img.picgo.net/2022/07/27/002.png",alt:""}})]),t._v(" "),i("p",[t._v("安装完成后，可执行 f2elint -h 以验证安装成功。")]),t._v(" "),i("h2",{attrs:{id:"一键接入规约"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一键接入规约"}},[t._v("#")]),t._v(" 一键接入规约")]),t._v(" "),i("p",[t._v("在项目根目录执行 f2elint init，即可一键接入规约，为项目安装规约 Lint 所需的依赖和配置。")]),t._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("f2elint init\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br")])]),i("p",[t._v("init 具体会做以下事情：")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("安装各种依赖：包括 Linter 依赖，如 ESLint、stylelint、commitlint、markdownlint 等；配置依赖，如 eslint-config-ali、stylelint-config-ali、commitlint-config-ali、markdownlint-config-ali 等")])]),t._v(" "),i("li",[i("p",[t._v("写入各种配置文件，包括：")])]),t._v(" "),i("li")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("文件名")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("功能")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v(".eslintrc.js、.eslintignore")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("ESLint 配置（继承 eslint-config-ali）及黑名单文件")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v(".stylelintrc.js、.stylelintignore")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("stylelint 配置（继承 stylelint-config-ali）及黑名单文件")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("commitlint.config.js")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("commitlint 配置（继承 commitlint-config-ali）")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v(".markdownlint.json、.markdownlintignore")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("markdownlint 配置及黑名单文件")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v(".prettierrc.js")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("符合规约的 Prettier 配置")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v(".editorconfig")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("符合规约的 editorconfig")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v(".vscode/extensions.json")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("写入规约相关的 VSCode 插件推荐，包括 ESLint、stylelint、markdownlint、prettier 等")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v(".vscode/settings.json")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("写入规约相关的 VSCode 设置，设置 ESLint 和 stylelint 插件的 validate 及保存时自动运行 fix，如果选择使用 Prettier，会同时将 prettier-vscode 插件设置为各前端语言的 defaultFormatter，并配置保存时自动格式化")])])])]),t._v(" "),i("ul",[i("li",[t._v("配置 git commit 卡口：使用 husky 设置代码提交卡口，在 git commit 时会运行 f2elint commit-file-scan 和 f2elint commit-msg-scan 分别对提交文件和提交信息进行规约检查。f2elint commit-file-scan 默认仅对 error 问题卡口，如果你想对 warn 问题也卡口，可以增加 --strict 参数以开启严格模式")])]),t._v(" "),i("h2",{attrs:{id:"vscode-安装-eslint、stylelint、prettierrc"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#vscode-安装-eslint、stylelint、prettierrc"}},[t._v("#")]),t._v(" vscode 安装 eslint、stylelint、prettierrc")]),t._v(" "),i("p",[t._v("在 vscode 中安装 eslint、styleint 和 prettierrc 三个插件。")]),t._v(" "),i("p",[t._v("安装好后无需配置，插件会自动找到项目中的.eslintrc.js、.stylelintrc.js、.prettierrc.js 等配置文件，到此为止，就可以正常使用【阿里巴巴前端规约】来规范自己的项目了。")]),t._v(" "),i("h2",{attrs:{id:"一键扫描"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一键扫描"}},[t._v("#")]),t._v(" 一键扫描")]),t._v(" "),i("p",[t._v("在项目的根目录执行 f2elint scan 命令，即可扫描项目的规约问题。\n"),i("img",{attrs:{src:"https://img.picgo.net/2022/07/28/68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f54423158576c6f6c4c7a4f3365346a535a4678585861505f4658612d313236382d3330352e706e67.png",alt:""}}),t._v("\n支持下列参数：")]),t._v(" "),i("ul",[i("li",[t._v("-q --quiet 仅报告 error 级别的问题")]),t._v(" "),i("li",[t._v("-o --output-report 输出扫描出的规约问题日志")]),t._v(" "),i("li",[t._v("-i --include "),i("dirpath",[t._v(" 指定要进行规约扫描的目录")])],1),t._v(" "),i("li",[t._v("--no-ignore 忽略 eslint 的 ignore 配置文件和 ignore 规则")])]),t._v(" "),i("h2",{attrs:{id:"一键修复"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一键修复"}},[t._v("#")]),t._v(" 一键修复")]),t._v(" "),i("p",[t._v("在项目的根目录执行 f2elint fix 命令，即可修复部分规约问题。\n"),i("img",{attrs:{src:"https://img.picgo.net/2022/07/28/68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f544231444f4f6e693763785f75346a535a466c5858586e554658612d3932342d3331372e706e67.png",alt:""}}),t._v("\n支持下列参数：")]),t._v(" "),i("ul",[i("li",[t._v("-i --include "),i("dirpath",[t._v(" 指定要进行修复扫描的目录")])],1),t._v(" "),i("li",[t._v("--no-ignore 忽略 eslint 的 ignore 配置文件和 ignore 规则\n注意请 review 下修复前后的代码，以免工具误修的情况。")])]),t._v(" "),i("h2",{attrs:{id:"f2elint-commit-file-scan-提交文件扫描"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#f2elint-commit-file-scan-提交文件扫描"}},[t._v("#")]),t._v(" f2elint commit-file-scan 提交文件扫描")]),t._v(" "),i("p",[t._v("在 git commit 时对提交文件进行规约问题扫描，需配合 git 的 pre-commit 钩子使用。")]),t._v(" "),i("p",[t._v("支持下列参数：")]),t._v(" "),i("ul",[i("li",[t._v("-s --strict 严格模式，对 warn 和 error 问题都卡口，默认仅对 error 问题卡口")])]),t._v(" "),i("h2",{attrs:{id:"f2elint-commit-msg-scan-提交信息扫描"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#f2elint-commit-msg-scan-提交信息扫描"}},[t._v("#")]),t._v(" f2elint commit-msg-scan 提交信息扫描")]),t._v(" "),i("p",[t._v("git commit 时对 commit message 的格式进行扫描（使用 commitlint），需配合 husky 的 commit-msg 钩子使用")]),t._v(" "),i("h2",{attrs:{id:"补充-git-commit-规范"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#补充-git-commit-规范"}},[t._v("#")]),t._v(" 补充： Git Commit 规范")]),t._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("<type>(<scope>): <subject>\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br")])]),i("p",[t._v("type：用于说明 commit 的类别，只允许使用下面 8 个标识。")]),t._v(" "),i("ol",[i("li",[t._v("feat：新功能（feature）")]),t._v(" "),i("li",[t._v("fix：修补 bug")]),t._v(" "),i("li",[t._v("docs：文档（documentation）")]),t._v(" "),i("li",[t._v("style： 格式（不影响代码运行的变动）")]),t._v(" "),i("li",[t._v("refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）")]),t._v(" "),i("li",[t._v("test：增加测试")]),t._v(" "),i("li",[t._v("chore：构建过程或辅助工具的变动")]),t._v(" "),i("li",[t._v("build: 本地 creator 构建")])]),t._v(" "),i("p",[t._v("scope：用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\nsubject 是 commit 目的的简短描述，不超过 50 个字符。一般有如下规约：")]),t._v(" "),i("ol",[i("li",[t._v("以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes")]),t._v(" "),i("li",[t._v("第一个字母小写")]),t._v(" "),i("li",[t._v("结尾不加句号（.）")])])])}),[],!1,null,null,null);e.default=a.exports}}]);